<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[Git] 我要整齊的Commit！用git-cz統一格式！</title>
    <link href="/posts/20240527-git-cz/"/>
    <url>/posts/20240527-git-cz/</url>
    
    <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><h3 id="簡述"><a href="#簡述" class="headerlink" title="簡述"></a>簡述</h3><p>在軟體開發中，Git是目前最主流的版本控制系統，用來追蹤和管理程式碼的變更。隨著專案規模的擴大，提交（commit）訊息的管理變得更加重要。<br>這時候，一個能幫助開發者規範提交訊息的工具就顯得特別重要。git-cz就是用來產生簡潔明瞭提交訊息的工具。  </p><h3 id="使用git-cz的優點"><a href="#使用git-cz的優點" class="headerlink" title="使用git-cz的優點"></a>使用git-cz的優點</h3><ol><li>規範提交訊息：確保每個提交的訊息符合預定的格式，便於日後的程式碼管理和版本控制。</li><li>提高可讀性：標準化的提交訊息讓程式碼歷史更易讀，方便開發者快速理解每個變更的目的。</li><li>快速生成提交訊息：使用命令列交互工具可以快速的產生訊息，只需要輸入最重要的內容，其餘的部分將由工具生成，節省時間</li></ol><h3 id="呈現效果"><a href="#呈現效果" class="headerlink" title="呈現效果"></a>呈現效果</h3><p><img src="https://i.imgur.com/0GlNvb5.png" alt="git-cz的commit範例"></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>採用git-cz的Commit格式如下：</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>): <span class="hljs-tag">&lt;<span class="hljs-name">gitmoji</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span></code></pre></div><p>例如：</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">feat</span><span class="hljs-params">(controller)</span></span>: ✨ 新增管理訂單頁面中的批次修改功能</code></pre></div><h4 id=""><a href="#" class="headerlink" title="&lt;Type&gt;"></a><code>&lt;Type&gt;</code></h4><p>類型如下：</p><ul><li>test：增加測試功能</li><li>feat：新增&#x2F;修改功能</li><li>fix：修正 Bug</li><li>chore：增加或修改第三方套件(輔助工具)等</li><li>docs：修改&#x2F;新增文件</li><li>refactor：重構 or 優化，不屬於 bug 也不屬於新增功能等</li><li>style：修改程式碼格式或風格，不影響原有運作，例如 ESLint、PHP-CS-Fixer</li><li>ci：CI 相關更動</li><li>perf：提高效能的程式碼修正</li></ul><h4 id="-1"><a href="#-1" class="headerlink" title="&lt;scope&gt;"></a><code>&lt;scope&gt;</code></h4><p>修改的範圍，可以按照需求分類。<br>以我自己開發Laravel為例：會按照功能組件拆成controller, service, request, command，輸入的內容通常為該檔案所屬的資料夾名稱，且為”單數”，全部小寫。</p><h4 id="-2"><a href="#-2" class="headerlink" title="&lt;gitmoji&gt;"></a><code>&lt;gitmoji&gt;</code></h4><p>也許你會注意到，Commit說明文字前面多了一個emoji，這其實是為了提高commit的可讀性，在一堆文字當中，如果存在簡潔明瞭的圖示，就可以快速分辨fix、feat等等的不同，而這種用途的emoji又稱為gitmoji。<br>你也可以在<a href="https://gitmoji.dev/">這裡</a>找到不同狀況下建議使用的gitmoji。<br><img src="https://i.imgur.com/9Xu2enV.png" alt="git-cz配合gitmoji使用效果加倍!"></p><h4 id="-3"><a href="#-3" class="headerlink" title="&lt;description&gt;"></a><code>&lt;description&gt;</code></h4><p>簡短的提交內容描述，字數限制的目的是強迫標題簡短，詳細的內容會放在commit的內文中。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>使用npm指令進行安裝<a href="https://github.com/stanlindsey/git-cz">此工具</a><br>(此工具為<a href="https://github.com/streamich/git-cz">streamich&#x2F;git-cz</a>的forked，不使用原版工具的原因是原版無法提交時手動輸入<code>&lt;scope&gt;</code>文字內容)</p><div class="code-wrapper"><pre><code class="hljs bash">npm install -g @stanlindsey/git-cz</code></pre></div><h3 id="配置設定檔"><a href="#配置設定檔" class="headerlink" title="配置設定檔"></a>配置設定檔</h3><p>此工具預設會找執行指令位置的設定檔(通常是專案根目錄)，如果找不到就往上一個層級的資料夾找，直到根目錄為止。並且檔案名稱固定為<code>changelog.config.js</code> </p><p>所以我們在專案的根目錄或之上的路徑建立一個名為<code>changelog.config.js</code> 的檔案，並在檔案中寫入以下內容後儲存：  </p><script src="//gist.github.com/b0862d481c714e99067b06c2ca401510.js?file=[changelog-config-js]"></script><!-- <script src="https://gist.github.com/hankz1108/b0862d481c714e99067b06c2ca401510.js"></script> --><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安裝該套件後會新增一個新的指令<code>git cz</code>，用來取代原有的<code>git commit</code> ，指令使用方式如下：</p><ol><li>執行<code>git cz</code>指令後會開啟一個交互式視窗，使用方向鍵選擇需要的commit type，選好後按下Enter<br><img src="https://i.imgur.com/mJUUMFl.png" alt="git-cz工具開啟畫面"></li><li>輸入修改的範圍<code>&lt;scope&gt;</code></li><li>輸入簡短說明此次commit的內容(有字數限制，必填)</li><li>詳細說明commit內容</li><li>重大更改說明</li><li>Issue，不常用到</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://github.com/stanlindsey/git-cz">https://github.com/stanlindsey/git-cz</a></li><li><a href="https://github.com/streamich/git-cz">https://github.com/streamich/git-cz</a></li><li><a href="https://gitmoji.dev/">https://gitmoji.dev/</a></li><li><a href="https://github.com/hankz1108">https://github.com/hankz1108</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[GCP] 如何產生帳戶金鑰並讓DBeaver連接BigQuery服務</title>
    <link href="/posts/20240410-gcp-bigquery-connect-with-dbeaver/"/>
    <url>/posts/20240410-gcp-bigquery-connect-with-dbeaver/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我們在使用Google Cloud Platform(GCP)的BigQuery服務的時候，如果總是透過網頁來操作難免不方便，本篇文章將描述如何產生GCP的服務帳戶金鑰，並利用該金鑰在DBeaver或是其他透過支援JDBC的軟體連接到BigQuery服務。</p><h2 id="一、產生服務帳戶金鑰"><a href="#一、產生服務帳戶金鑰" class="headerlink" title="一、產生服務帳戶金鑰"></a>一、產生服務帳戶金鑰</h2><p>參考<a href="https://m2msupport.net/m2msupport/generate-service-account-key-in-google-cloud-platform-gcp/">這篇文章</a>取得服務帳戶金鑰的json檔案，過程中請注意以下事項：</p><ul><li>按照需要給予有權限存取BigQuery的角色</li><li>將服務帳戶的存取權授予自己的google帳號</li><li>下載的檔案請務必保管好，之後的連線都會需要依靠這個檔案。</li></ul><h2 id="二、設置DBeaver的連線"><a href="#二、設置DBeaver的連線" class="headerlink" title="二、設置DBeaver的連線"></a>二、設置DBeaver的連線</h2><ol><li><p>到GCP的BigQuery服務界面，並在左側的Explorer中找到你想要連接的服務，並點擊查詢，就可以在右方分頁內容中複製出Project ID</p><p> <img src="https://i.imgur.com/GZOinKF.png" alt="20240410224716"></p></li><li><p>回到DBeaver中，將複製過來的Project ID貼到Project的欄位中(下圖紅框處)<br> <img src="https://i.imgur.com/0wDjC7a.png" alt="20240410224953"></p></li><li><p>將OAuth type改為User-based<br> <img src="https://i.imgur.com/a1nwMmv.png" alt="20240410225001"></p></li><li><p>在Key Path的欄位選擇剛剛下載的json檔案<br> <img src="https://i.imgur.com/0DA25zS.png" alt="20240410225009"></p></li><li><p>填寫完畢後，就可以使用左下角的Test Connection按鈕測試連線，連線時會透過瀏覽器確認帳號授權，如果順利就可以成功連接到BigQuery的服務了。(如果沒有安裝Driver，就會跳出下載JDBC Driver的視窗)</p></li></ol><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>elementary OS 7.1 (based on Ubuntu 22.04)</li><li>DBeaver 24.0.2</li><li>Simba JDBC Driver for Google BigQuery 42_1.5.0.1001</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://dbeaver.com/docs/dbeaver/Database-driver-BigQuery/24.0/">https://dbeaver.com/docs/dbeaver/Database-driver-BigQuery/24.0/</a></li><li><a href="https://m2msupport.net/m2msupport/generate-service-account-key-in-google-cloud-platform-gcp/">https://m2msupport.net/m2msupport/generate-service-account-key-in-google-cloud-platform-gcp/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>GCP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GCP</tag>
      
      <tag>BigQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[PHP] $this、self與static的差別</title>
    <link href="/posts/20240310-php-self-and-static/"/>
    <url>/posts/20240310-php-self-and-static/</url>
    
    <content type="html"><![CDATA[<p>在PHP中可以用<code>$this</code>、<code>self</code>、與<code>static</code>代表自己這個類別<br>有些人可能搞不清楚他們的區別，尤其是<code>self</code>、與<code>static</code><br>但是他們各別有自己的意義和用法<br>在實戰中這些些微的差別可能就會造成不可預期的問題<br>今天我們就來仔細說明一下他們之間的差別吧</p><h2 id="1-this"><a href="#1-this" class="headerlink" title="1. $this"></a>1. $this</h2><h3 id="說明："><a href="#說明：" class="headerlink" title="說明："></a>說明：</h3><ul><li><code>$this</code> 是一個特殊的變數，用於在物件方法中引用當前物件的實例</li><li>它只能在類別的非靜態方法中使用，且用於引用該方法所屬的物件</li><li>通常用於存取物件的屬性和呼叫物件的方法</li></ul><h3 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$bar</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;    <span class="hljs-comment">// 存取屬性</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBar</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;bar;    &#125;    <span class="hljs-comment">// 呼叫方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printBar</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getBar</span>();    &#125;&#125;<span class="hljs-variable">$foo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<span class="hljs-variable">$foo</span>-&gt;bar = <span class="hljs-string">&#x27;my_bar&#x27;</span>;<span class="hljs-variable">$foo</span>-&gt;<span class="hljs-title function_ invoke__">printBar</span>(); <span class="hljs-comment">// 印出my_bar</span></code></pre></div><h2 id="2-self"><a href="#2-self" class="headerlink" title="2. self"></a>2. self</h2><h3 id="說明：-1"><a href="#說明：-1" class="headerlink" title="說明："></a>說明：</h3><ul><li><code>self</code> 是用於在類別內部引用自身的關鍵字</li><li>它可以在靜態方法和非靜態方法中引用未實例化的類別本身</li><li>使用 <code>self</code> 時，引用的是定義該關鍵字的類別，而不是實例化後的物件，所以被繼承之後，<code>self</code>指的還是當初的父類別</li></ul><h3 id="範例：-1"><a href="#範例：-1" class="headerlink" title="範例："></a>範例：</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BAR</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printBar</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">BAR</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BAR</span> = <span class="hljs-string">&#x27;bar2&#x27;</span>;&#125;<span class="hljs-variable">$foo2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo2</span>();<span class="hljs-variable">$foo2</span>-&gt;<span class="hljs-title function_ invoke__">printBar</span>(); <span class="hljs-comment">// 印出bar</span></code></pre></div><h2 id="3-static"><a href="#3-static" class="headerlink" title="3. static"></a>3. static</h2><h3 id="說明：-2"><a href="#說明：-2" class="headerlink" title="說明："></a>說明：</h3><ul><li><code>static</code> 也是用於在類別內部引用自身的關鍵字</li><li>它可以在靜態方法和非靜態方法中引用未實例化的類別本身</li><li>不同於 <code>self</code>，<code>static</code> 在運行時繫結，因此可以實現後期繫結（<a href="https://www.php.net/manual/en/language.oop5.late-static-bindings.php">Late Static Binding</a>），引用該方法實際被調用的類別<div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BAR</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printBar</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-built_in">static</span>::<span class="hljs-variable constant_">BAR</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BAR</span> = <span class="hljs-string">&#x27;bar2&#x27;</span>;&#125;<span class="hljs-variable">$foo2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo2</span>();<span class="hljs-variable">$foo2</span>-&gt;<span class="hljs-title function_ invoke__">printBar</span>(); <span class="hljs-comment">// 印出bar2</span></code></pre></div></li></ul><h2 id="比對表"><a href="#比對表" class="headerlink" title="比對表"></a>比對表</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>$this</strong></th><th><strong>self</strong></th><th><strong>static</strong></th></tr></thead><tbody><tr><td><strong>是否實例化</strong></td><td>是</td><td>否</td><td>否</td></tr><tr><td><strong>聯繫對象</strong></td><td>調用時的實例化物件內容</td><td>編譯時的類別</td><td>實際被調用的類別</td></tr><tr><td><strong>是否能在靜態方法中使用</strong></td><td>否</td><td>是</td><td>是</td></tr><tr><td><strong>繼承後造成差異</strong></td><td>是</td><td>否</td><td>是</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Documents] Laravel System Settings套件</title>
    <link href="/posts/20240119-documents-laravel-system-settings/"/>
    <url>/posts/20240119-documents-laravel-system-settings/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在後端系統中，常常會需要長期儲存一些特定資料，這些特定資料可能只會有少數幾筆，但仍然有存放資料庫的需求。</p><p>例如：前台燈箱公告內容、跑馬燈內容、商品資料最後同步時間等，只要是單純需要儲存長期資料(非cache)，但又不想要特地為每個需求開資料表，就可以統一使用這個套件在一個資料表中用key-value的方式進行管理，另外還支援group功能。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="1-使用-Composer-安裝"><a href="#1-使用-Composer-安裝" class="headerlink" title="1. 使用 Composer 安裝"></a>1. 使用 Composer 安裝</h3><p>在終端機中執行 Composer require 指令：</p><div class="code-wrapper"><pre><code class="hljs bash">composer require hankz/laravel-system-settings</code></pre></div><h3 id="2-設定"><a href="#2-設定" class="headerlink" title="2. 設定"></a>2. 設定</h3><p>此套件支援 Laravel 的自動發現功能，安裝完成後即可使用。</p><h3 id="3-發佈配置檔"><a href="#3-發佈配置檔" class="headerlink" title="3. 發佈配置檔"></a>3. 發佈配置檔</h3><p>您需要發佈配置檔：</p><div class="code-wrapper"><pre><code class="hljs bash">php artisan vendor:publish --provider=<span class="hljs-string">&quot;Hankz\LaravelSystemSettings\SystemSettingProvider&quot;</span></code></pre></div><h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><p>您可以在 <code>config\system-settings.php</code> 中配置此套件：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">return</span> [    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 使用的資料表名稱。</span><span class="hljs-comment">     */</span>    <span class="hljs-string">&#x27;table_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;system_settings&#x27;</span>,    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 預設值。</span><span class="hljs-comment">     */</span>    <span class="hljs-string">&#x27;default&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;group&#x27;</span> =&gt; <span class="hljs-string">&#x27;default&#x27;</span>,    ],];</code></pre></div><ul><li>table_name - 將系統設定資料表名稱保存在資料庫中。</li><li>default.group - 在缺少 group 參數時的預設群組名稱。</li></ul><h3 id="5-遷移"><a href="#5-遷移" class="headerlink" title="5. 遷移"></a>5. 遷移</h3><p>您還應該運行遷移命令：</p><div class="code-wrapper"><pre><code class="hljs bash">php artisan migrate</code></pre></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>此套件非常簡單，為您提供以下方法。</p><h3 id="new-string-key-string-value-string-group-null-string-description-null-bool"><a href="#new-string-key-string-value-string-group-null-string-description-null-bool" class="headerlink" title="new(string $key, string $value, string $group = null, string $description = null): bool"></a><code>new(string $key, string $value, string $group = null, string $description = null): bool</code></h3><p>創建一個新的系統設定。</p><h4 id="參數："><a href="#參數：" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$key</code>（string）：系統設定的唯一標識符。</li><li><code>$value</code>（string）：與系統設定相關聯的值。</li><li><code>$group</code>（string|null）：（可選）系統設定所屬的群組。默認為 <code>null</code>。</li><li><code>$description</code>（string|null）：（可選）提供有關系統設定的附加信息的描述。默認為 <code>null</code>。</li></ul><h4 id="範例："><a href="#範例：" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-keyword">new</span>(<span class="hljs-string">&#x27;keyName&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;groupName&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span>);</code></pre></div><h4 id="返回："><a href="#返回：" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>bool</code>：如果成功創建系統設定，則返回 <code>true</code>，如果設定已存在，則拋出 <code>SystemSettingAlreadyExistsException</code>。</li></ul><hr><h3 id="has-string-key-string-group-null-bool"><a href="#has-string-key-string-group-null-bool" class="headerlink" title="has(string $key, string $group = null): bool"></a><code>has(string $key, string $group = null): bool</code></h3><p><code>has()</code> 方法檢查是否存在具有給定鍵和可選群組的系統設定。</p><h4 id="參數：-1"><a href="#參數：-1" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$key</code>（string）：系統設定的唯一標識符。</li><li><code>$group</code>（string|null）：（可選）系統設定所屬的群組。默認為 <code>null</code>。</li></ul><h4 id="範例：-1"><a href="#範例：-1" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;keyName&#x27;</span>, <span class="hljs-string">&#x27;groupName&#x27;</span>);</code></pre></div><h4 id="返回：-1"><a href="#返回：-1" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>bool</code>：如果系統設定存在，則返回 <code>true</code>，否則返回 <code>false</code>。</li></ul><hr><h3 id="all-array"><a href="#all-array" class="headerlink" title="all(): array"></a><code>all(): array</code></h3><p>以鍵值對格式返回所有系統設定的所有鍵和值。</p><h4 id="範例：-2"><a href="#範例：-2" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">all</span>();</code></pre></div><h4 id="返回：-2"><a href="#返回：-2" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>array</code>：包含所有系統設定的關聯陣列，格式為 <code>[&#39;key&#39; =&gt; &#39;value&#39;]</code>。</li></ul><hr><h3 id="get-string-key-string-group-null-string-default-null-null-string"><a href="#get-string-key-string-group-null-string-default-null-null-string" class="headerlink" title="get(string $key, string $group = null, string $default = null): null|string"></a><code>get(string $key, string $group = null, string $default = null): null|string</code></h3><p><code>get()</code> 方法允許您使用鍵名和群組名檢索值，並且還接受默認值。</p><h4 id="參數：-2"><a href="#參數：-2" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$key</code>（string）：系統設定的唯一標識符。</li><li><code>$group</code>（string|null）：（可選）系統設定所屬的群組。默認為 <code>null</code>。</li><li><code>$default</code>（string|null）：（可選）如果找不到系統設定，則返回的默認值。默認為 <code>null</code>。</li></ul><h4 id="範例：-3"><a href="#範例：-3" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;keyName&#x27;</span>, <span class="hljs-string">&#x27;groupName&#x27;</span>, <span class="hljs-string">&#x27;defaultValue&#x27;</span>);</code></pre></div><h4 id="返回：-3"><a href="#返回：-3" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>string|null</code>：如果找到系統設定的值，則返回其值，否則返回指定的默認值，如果未提供默認值，則返回 <code>null</code>。</li></ul><hr><h3 id="set-string-key-string-value-string-group-null-string-description-null-bool-createWhenNotExist-false-void"><a href="#set-string-key-string-value-string-group-null-string-description-null-bool-createWhenNotExist-false-void" class="headerlink" title="set(string $key, string $value, string $group = null, string $description = null, bool $createWhenNotExist = false): void"></a><code>set(string $key, string $value, string $group = null, string $description = null, bool $createWhenNotExist = false): void</code></h3><p><code>set()</code> 方法允許您更新現有系統設定的值和描述，或者在不存在時創建一個新的系統設定。</p><h4 id="參數：-3"><a href="#參數：-3" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$key</code>（string）：系統設定的唯一標識符。</li><li><code>$value</code>（string）：要為系統設定設置的新值。</li><li><code>$group</code>（string|null）：（可選）系統設定所屬的群組。默認為 <code>null</code>。</li><li><code>$description</code>（string|null）：（可選）提供有關系統設定的附加信息的描述。默認為 <code>null</code>。</li><li><code>$createWhenNotExist</code>（bool）：（可選）如果設置為 <code>true</code>，則如果指定的鍵不存在，將創建新的系統設定。默認為 <code>false</code>。</li></ul><h4 id="範例：-4"><a href="#範例：-4" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;keyName&#x27;</span>, <span class="hljs-string">&#x27;newValue&#x27;</span>, <span class="hljs-string">&#x27;groupName&#x27;</span>, <span class="hljs-string">&#x27;newDescription&#x27;</span>, <span class="hljs-literal">true</span>);</code></pre></div><h4 id="返回：-4"><a href="#返回：-4" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>void</code></li></ul><hr><h3 id="getByGroup-string-group-array"><a href="#getByGroup-string-group-array" class="headerlink" title="getByGroup(string $group): array"></a><code>getByGroup(string $group): array</code></h3><p>檢索指定群組內的所有系統設定。</p><h4 id="參數：-4"><a href="#參數：-4" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$group</code>（string）：要檢索系統設定</li></ul><p>的群組。</p><h4 id="範例：-5"><a href="#範例：-5" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">getByGroup</span>(<span class="hljs-string">&#x27;groupName&#x27;</span>);</code></pre></div><h4 id="返回：-5"><a href="#返回：-5" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>array</code>：包含指定群組內的系統設定的關聯陣列，格式為 <code>[&#39;key&#39; =&gt; &#39;value&#39;]</code>。</li></ul><hr><h3 id="setByGroup-array-settings-string-group-null-bool-createWhenNotExist-false-void"><a href="#setByGroup-array-settings-string-group-null-bool-createWhenNotExist-false-void" class="headerlink" title="setByGroup(array $settings, string $group = null, bool $createWhenNotExist = false): void"></a><code>setByGroup(array $settings, string $group = null, bool $createWhenNotExist = false): void</code></h3><p>在指定群組內更新或創建多個系統設定。</p><h4 id="參數：-5"><a href="#參數：-5" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$settings</code>（array）：包含系統設定的關聯陣列，格式為 <code>[&#39;key&#39; =&gt; [&#39;value&#39; =&gt; &#39;&#39;, &#39;description&#39; =&gt; &#39;&#39;]]</code>。</li><li><code>$group</code>（string|null）：（可選）要將系統設定應用到的群組。默認為 <code>null</code>。</li><li><code>$createWhenNotExist</code>（bool）：（可選）如果設置為 <code>true</code>，則將在指定群組中不存在的鍵上創建新的系統設定。默認為 <code>false</code>。</li></ul><h4 id="範例：-6"><a href="#範例：-6" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">setByGroup</span>([<span class="hljs-string">&#x27;key1&#x27;</span> =&gt; [<span class="hljs-string">&#x27;value&#x27;</span> =&gt; <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;description&#x27;</span> =&gt; <span class="hljs-string">&#x27;desc1&#x27;</span>]], <span class="hljs-string">&#x27;groupName&#x27;</span>, <span class="hljs-literal">true</span>);</code></pre></div><h4 id="返回：-6"><a href="#返回：-6" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>void</code></li></ul><hr><h3 id="delete-string-key-string-group-null-bool-null"><a href="#delete-string-key-string-group-null-bool-null" class="headerlink" title="delete(string $key, string $group = null): bool|null"></a><code>delete(string $key, string $group = null): bool|null</code></h3><p>刪除具有指定鍵和可選群組的系統設定。</p><h4 id="參數：-6"><a href="#參數：-6" class="headerlink" title="參數："></a>參數：</h4><ul><li><code>$key</code>（string）：系統設定的唯一標識符。</li><li><code>$group</code>（string|null）：（可選）系統設定所屬的群組。默認為 <code>null</code>。</li></ul><h4 id="範例：-7"><a href="#範例：-7" class="headerlink" title="範例："></a>範例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">SystemSettingManager</span>::<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;keyName&#x27;</span>, <span class="hljs-string">&#x27;groupName&#x27;</span>);</code></pre></div><h4 id="返回：-7"><a href="#返回：-7" class="headerlink" title="返回："></a>返回：</h4><ul><li><code>bool|null</code>：如果成功刪除系統設定，則返回 <code>true</code>，如果設定不存在，則返回 <code>false</code>，或者如果發生錯誤，則返回 <code>null</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Documents</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Documents</tag>
      
      <tag>package</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Hexo] 使用Docker Compose快速架設Hexo環境</title>
    <link href="/posts/20240116-hexo-docker-compose/"/>
    <url>/posts/20240116-hexo-docker-compose/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為我希望可以在我平常會使用的不同設備中，輕鬆的使用<a href="https://hexo.io/">Hexo</a>撰寫部落格，而不用擔心環境設定的問題。</p><p>自然而然的我就想要利用Docker來免去環境建置的煩惱，而且只要在我需要的設備上下載這個Docker Compose並執行，就可以簡單地開始撰寫Hexo Blog，這樣剛好出現的靈感就可以馬上記錄下來，相當方便。</p><p>使用了一段時間之後，感覺這個Docker Compose使用上也逐漸穩定，剛好朋友也想要玩玩看Hexo，於是我就將這個寫好的Docker Compose給分享出來。</p><p>如果有需要的人盡量拿去使用，當然如果有發現問題，或是有甚麼希望我改善的地方，也歡迎透過我的<a href="https://github.com/hankz1108/hexo-docker-compose">GitHub</a>中的Issues功能提出。</p><blockquote><p>該專案的靈感來自 <a href="https://github.com/spurin/docker-hexo">spurin&#x2F;docker-hexo</a>，並對其功能進行了調整。</p></blockquote><h2 id="一、安裝"><a href="#一、安裝" class="headerlink" title="一、安裝"></a>一、安裝</h2><p>只要電腦有安裝Docker Compose的環境下載就可以直接使用，</p><h3 id="GitHub下載"><a href="#GitHub下載" class="headerlink" title="GitHub下載"></a>GitHub下載</h3><p>您可以直接透過<a href="https://github.com/hankz1108/hexo-docker-compose">GitHub</a>下載本專案<br><img src="https://github.com/hankz1108/hexo-docker-compose/raw/main/docs/images/installation-github-download-1.jpg" alt="image"></p><h3 id="git-clone取得"><a href="#git-clone取得" class="headerlink" title="git clone取得"></a>git clone取得</h3><p>也可以透過<code>git clone</code>取得</p><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hankz1108/hexo-docker-compose.git my-hexo<span class="hljs-built_in">cd</span> my-hexo</code></pre></div><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>複製根目錄中的<code>.env.example</code>並重新命名為<code>.env</code>，並填寫其中的選項</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">#=========== 必須的設定 ==========#</span><span class="hljs-comment"># hexo要對到本地主機的port</span>SITE_PORT=<span class="hljs-comment"># 時區(ex:Asia/Taipei)</span>TIME_ZONE=<span class="hljs-comment">#========= 發布需要的設定 =========#</span><span class="hljs-comment"># git使用者名稱</span>GIT_USER=<span class="hljs-comment"># git使用者email</span>GIT_EMAIL=<span class="hljs-comment"># github token(發佈到github pages需要)</span>GITHUB_TOKEN=</code></pre></div><h2 id="三、啟動"><a href="#三、啟動" class="headerlink" title="三、啟動"></a>三、啟動</h2><p>需要在根目錄建立一個空的<code>app</code>資料夾，或是將現有的hexo目錄放進來，結構應該是這樣的</p><div class="code-wrapper"><pre><code class="hljs 1c">app├── _config.yml├── package.json├── scaffolds├── source<span class="hljs-string">|   ├── _drafts</span><span class="hljs-string">|   └── _posts</span>└── themes</code></pre></div><p>接下來打開終端機，執行<code>docker compose</code>建立&amp;啟動容器</p><div class="code-wrapper"><pre><code class="hljs bash">docker compose up -d</code></pre></div><p>啟動成功後就可以在<code>http://localhost:&lt;your_prot&gt;</code>看到你的hexo了</p><blockquote><p>如果docker啟動失敗，且出現以下錯誤訊息：</p><div class="code-wrapper"><pre><code class="hljs stata">/init/init.<span class="hljs-keyword">sh</span>: 9: <span class="hljs-keyword">Syntax</span> <span class="hljs-keyword">error</span>: <span class="hljs-string">&quot;fi&quot;</span> unexpected (expecting <span class="hljs-string">&quot;then&quot;</span>)</code></pre></div><p>有可能是windows系統與Linux換行符號不同導致的<br>嘗試將<code>hexo\init\init.sh</code>與其他需要在<code>container</code>執行的文字檔全部改為LF結尾<br>再刪除<code>container</code>與<code>image</code>後重新執行<code>docker compose up -d</code></p></blockquote><h2 id="四、發布設定"><a href="#四、發布設定" class="headerlink" title="四、發布設定"></a>四、發布設定</h2><p>如果你要使用<code>hexo-deployer-git</code>進行網站發布，以下是<code>github pages</code>設定範例。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span>    <span class="hljs-attr">github:</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/username/github_page.github.io.git</span>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>    <span class="hljs-attr">token:</span> <span class="hljs-string">$GITHUB_TOKEN</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">$GIT_USER</span>  <span class="hljs-attr">email:</span> <span class="hljs-string">$GIT_EMAIL</span></code></pre></div><h2 id="五、自訂啟動腳本"><a href="#五、自訂啟動腳本" class="headerlink" title="五、自訂啟動腳本"></a>五、自訂啟動腳本</h2><p>您可以在<code>hexo\init\scripts</code>底下建立任意名稱的<code>*.sh</code>檔案<br>腳本會自動執行該資料夾底下以<code>.sh</code>結尾的檔案<br>讓您可以在hexo伺服器執行前先執行您想要的腳本</p><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p>建置完畢後，也可以來看看我<a href="/posts/20231220-hexo-plugin-recommend/" title="[Hexo] 常用外掛(plugin)推薦">推薦的外掛(plugin)</a><br>裡面包含方便部屬與各種強化SEO的套件</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Docker</tag>
      
      <tag>Docker Compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Hexo] 常用外掛(plugin)推薦</title>
    <link href="/posts/20231220-hexo-plugin-recommend/"/>
    <url>/posts/20231220-hexo-plugin-recommend/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本站是使用<a href="https://hexo.io/">Hexo</a>架設的，這是一個靜態網站&#x2F;部落格的生成器，並支援markdown語法生成網頁內容。<br>除此之外還擁有許多第三方的主題與外掛，使用人數眾多、資源也相當好找，這是我選擇它的原因。<br>本篇要介紹的是目前有在使用，且相對比較推薦的外掛(plugin)。</p><h2 id="一、推薦套件"><a href="#一、推薦套件" class="headerlink" title="一、推薦套件"></a>一、推薦套件</h2><h3 id="1-hexo-deployer-git"><a href="#1-hexo-deployer-git" class="headerlink" title="1. hexo-deployer-git"></a>1. <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></h3><p>這是透過git部署的必備plugin，安裝後可以透過在<code>_config.yml</code>設定<code>deploy</code>的內容<br>先執行指令安裝套件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><p>之後開啟<code>_config.yml</code>根據需求進行設定：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-attr">repo:</span>    <span class="hljs-attr">github:</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/&lt;USERNAME&gt;/&lt;REPOSITORY_NAME&gt;</span>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>    <span class="hljs-attr">token:</span> <span class="hljs-string">&lt;GITHUB_TOKEN&gt;</span><span class="hljs-attr">name:</span> <span class="hljs-string">&lt;GIT_USERNAME&gt;</span><span class="hljs-attr">email:</span> <span class="hljs-string">&lt;GIT_EMAIL&gt;</span></code></pre></div><p>設定完成後就可以執行指令透過git進行部署</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo deploy</code></pre></div><h3 id="2-hexo-generator-sitemap"><a href="#2-hexo-generator-sitemap" class="headerlink" title="2. hexo-generator-sitemap"></a>2. <a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></h3><p>這是可以自動產生網站Sitemap的plugin，對於SEO會比較友好。<br>先執行指令安裝套件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save</code></pre></div><p>之後開啟<code>_config.yml</code>根據需求進行設定：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">sitemap:</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span>    <span class="hljs-attr">template:</span>    <span class="hljs-attr">rel:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">tags:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span></code></pre></div><p>之後部署後就會自動生成sitemap.xml這個檔案了</p><h3 id="3-hexo-all-minifier"><a href="#3-hexo-all-minifier" class="headerlink" title="3. hexo-all-minifier"></a>3. <a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a></h3><p>這個plugin整合了多個plugin，用途都是縮小各種檔案類型，以加快網站載入速度，該套件包含：</p><ul><li><a href="https://github.com/hexojs/hexo-html-minifier">hexo-html-minifier</a></li><li><a href="https://github.com/hexojs/hexo-clean-css">hexo-clean-css</a></li><li><a href="https://github.com/hexojs/hexo-uglify">hexo-uglify</a></li><li><a href="https://github.com/vseventer/hexo-imagemin">hexo-imagemin</a></li></ul><p>先執行指令安裝套件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save</code></pre></div><p>如果是mac的使用者需要額外安裝其他東西</p><div class="code-wrapper"><pre><code class="hljs bash">brew install libtool automake autoconf nasm</code></pre></div><p>之後開啟<code>_config.yml</code>開啟該功能：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">all_minifier:</span> <span class="hljs-literal">true</span></code></pre></div><p>也可以針對每個套件詳細設定</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">js_concator:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">bundle_path:</span> <span class="hljs-string">&#x27;/js/bundle.js&#x27;</span>    <span class="hljs-attr">front:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">silent:</span> <span class="hljs-literal">false</span><span class="hljs-attr">html_minifier:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">ignore_error:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">silent:</span> <span class="hljs-literal">false</span><span class="hljs-attr">css_minifier:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">silent:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">exclude:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.css&#x27;</span><span class="hljs-attr">js_minifier:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">silent:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">output:</span>    <span class="hljs-attr">compress:</span>    <span class="hljs-attr">exclude:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.min.js&#x27;</span><span class="hljs-attr">image_minifier:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">interlaced:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">multipass:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">optimizationLevel:</span> <span class="hljs-number">2</span>    <span class="hljs-attr">pngquant:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">progressive:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">silent:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">exclude:</span></code></pre></div><h3 id="4-hexo-filter-nofollow"><a href="#4-hexo-filter-nofollow" class="headerlink" title="4. hexo-filter-nofollow"></a>4. <a href="https://github.com/hexojs/hexo-filter-nofollow">hexo-filter-nofollow</a></h3><p>加入<code>rel=&quot;noopener external nofollow noreferrer&quot;</code>到外部連結上，可以優化SEO，避免權重流失。<br>先執行指令安裝套件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm i hexo-filter-nofollow --save</code></pre></div><p>之後開啟<code>_config.yml</code>根據需求進行設定：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">nofollow:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">field:</span> <span class="hljs-string">site</span>    <span class="hljs-attr">exclude:</span></code></pre></div><h2 id="二、主題-Theme"><a href="#二、主題-Theme" class="headerlink" title="二、主題(Theme)"></a>二、主題(Theme)</h2><p>我使用<a href="https://hexo.fluid-dev.com/">Fluid</a>作為我的Theme，詳細的使用方式可以參考<a href="https://hexo.fluid-dev.com/docs/guide/">官方文件</a>，在此不多做贅述。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li><a href="https://github.com/hankz1108/hexo-docker-compose">hexo-docker-compose</a></li><li>Hexo 6.3.0</li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[PHP] 在Linux上安裝PHP CS Fixer</title>
    <link href="/posts/20231206-php-install-cs-fixer-on-ubuntu/"/>
    <url>/posts/20231206-php-install-cs-fixer-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer">PHP CS Fixer</a>作為一個程式碼標準修復器(PHP Coding Standards Fixer)。<br>在PHP的團隊開發中，可以確保每個開發人員的Coding Style相同，<br>一來可以避免排版過於奔放，導致可讀性過低的問題，<br>還能減輕Code Review與Debug的負擔，<br>本篇文章將會詳細說明PHP CS Fixer在Linux環境下的安裝方式。</p><blockquote><p>注意: 本文撰寫時，PHP CS Fixer支援的PHP最低版本是7.4</p></blockquote><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="一、下載安裝"><a href="#一、下載安裝" class="headerlink" title="一、下載安裝"></a>一、下載安裝</h3><ol><li><p>使用wget指令下載</p> <div class="code-wrapper"><pre><code class="hljs bash">wget https://cs.symfony.com/download/php-cs-fixer-v3.phar -O php-cs-fixer</code></pre></div></li><li><p>修改權限</p> <div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> a+x php-cs-fixer</code></pre></div></li><li><p>移動到Linux系統的PATH環境變數資料夾(&#x2F;usr&#x2F;bin&#x2F;可以根據需要修改)</p> <div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> php-cs-fixer /usr/bin/php-cs-fixer</code></pre></div></li></ol><h3 id="二、Composer安裝"><a href="#二、Composer安裝" class="headerlink" title="二、Composer安裝"></a>二、Composer安裝</h3><ol><li><p>在Linux中安裝Composer<a href="/posts/20231206-composer-install-on-ubuntu/" title="[PHP] 在Linux中安裝Composer">文章連結</a></p></li><li><p>在專案資料夾中執行composer指令</p> <div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p tools/php-cs-fixercomposer require --working-dir=tools/php-cs-fixer friendsofphp/php-cs-fixer</code></pre></div></li><li><p>執行檔路徑如下</p> <div class="code-wrapper"><pre><code class="hljs bash">tools/php-cs-fixer/vendor/bin/php-cs-fixer fix src</code></pre></div></li></ol><h3 id="三、驗證是否安裝成功"><a href="#三、驗證是否安裝成功" class="headerlink" title="三、驗證是否安裝成功"></a>三、驗證是否安裝成功</h3><ol><li>執行<code>php-cs-fixer</code>指令 <div class="code-wrapper"><pre><code class="hljs bash">php-cs-fixer -V</code></pre></div> 若出現PHP CS Fixer版本訊息則代表成功安裝</li></ol><h3 id="四、直接使用"><a href="#四、直接使用" class="headerlink" title="四、直接使用"></a>四、直接使用</h3><ol><li><p>可以指定檔案或資料夾進行修正(不含隱藏檔、vendor中的檔案)，預設使用<code>@PSR12</code>的規則</p> <div class="code-wrapper"><pre><code class="hljs bash">php-cs-fixer fix /path/to/dirphp-cs-fixer fix /path/to/file</code></pre></div></li><li><p>實際修正前可以先用以下指令，確認有哪些檔案會被改動</p> <div class="code-wrapper"><pre><code class="hljs bash">php-cs-fixer list-files /path/to/dir</code></pre></div></li><li><p>也可以指定規則</p> <div class="code-wrapper"><pre><code class="hljs bash">php-cs-fixer fix /path/to/dir --rules=@PSR12</code></pre></div></li><li><p>使用自訂的規則檔案(自訂規則檔案的<a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/config.rst">官方文件</a>)</p> <div class="code-wrapper"><pre><code class="hljs bash">php php-cs-fixer.phar list-files --config=.php-cs-fixer.dist.php</code></pre></div></li></ol><h3 id="五、設定檔"><a href="#五、設定檔" class="headerlink" title="五、設定檔"></a>五、設定檔</h3><p>以下是一個設定檔的範例(官方範例)：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">PhpCsFixer\Config</span>())    -&gt;<span class="hljs-title function_ invoke__">setRules</span>([        <span class="hljs-string">&#x27;@PSR12&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;array_indentation&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;array_syntax&#x27;</span> =&gt; [<span class="hljs-string">&#x27;syntax&#x27;</span> =&gt; <span class="hljs-string">&#x27;short&#x27;</span>],        <span class="hljs-string">&#x27;combine_consecutive_unsets&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;class_attributes_separation&#x27;</span> =&gt; [<span class="hljs-string">&#x27;elements&#x27;</span> =&gt; [<span class="hljs-string">&#x27;method&#x27;</span> =&gt; <span class="hljs-string">&#x27;one&#x27;</span>,]],        <span class="hljs-string">&#x27;multiline_whitespace_before_semicolons&#x27;</span> =&gt; <span class="hljs-literal">false</span>,        <span class="hljs-string">&#x27;single_quote&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;binary_operator_spaces&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;operators&#x27;</span> =&gt; [                // <span class="hljs-string">&#x27;=&gt;&#x27;</span> =&gt; <span class="hljs-string">&#x27;align&#x27;</span>,                // <span class="hljs-string">&#x27;=&#x27;</span> =&gt; <span class="hljs-string">&#x27;align&#x27;</span>            ]        ],        // <span class="hljs-string">&#x27;blank_line_after_opening_tag&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        // <span class="hljs-string">&#x27;blank_line_before_statement&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;braces&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;allow_single_line_closure&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        ],        // <span class="hljs-string">&#x27;cast_spaces&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        // <span class="hljs-string">&#x27;class_definition&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;singleLine&#x27;</span> =&gt; <span class="hljs-literal">true</span>),        <span class="hljs-string">&#x27;concat_space&#x27;</span> =&gt; [<span class="hljs-string">&#x27;spacing&#x27;</span> =&gt; <span class="hljs-string">&#x27;one&#x27;</span>],        <span class="hljs-string">&#x27;declare_equal_normalize&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;function_typehint_space&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;single_line_comment_style&#x27;</span> =&gt; [<span class="hljs-string">&#x27;comment_types&#x27;</span> =&gt; [<span class="hljs-string">&#x27;hash&#x27;</span>]],        <span class="hljs-string">&#x27;include&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;lowercase_cast&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;native_function_casing&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;new_with_braces&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_blank_lines_after_class_opening&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_blank_lines_after_phpdoc&#x27; =&gt; true,</span>        <span class="hljs-string">&#x27;no_blank_lines_before_namespace&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;no_empty_comment&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_empty_phpdoc&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_empty_statement&#x27; =&gt; true,</span>        <span class="hljs-string">&#x27;no_extra_blank_lines&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;tokens&#x27;</span> =&gt; [                <span class="hljs-string">&#x27;curly_brace_block&#x27;</span>,                <span class="hljs-string">&#x27;extra&#x27;</span>,                <span class="hljs-comment">// &#x27;parenthesis_brace_block&#x27;,</span>                <span class="hljs-comment">// &#x27;square_brace_block&#x27;,</span>                <span class="hljs-string">&#x27;throw&#x27;</span>,                <span class="hljs-string">&#x27;use&#x27;</span>,            ]        ],        <span class="hljs-comment">// &#x27;no_leading_import_slash&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_leading_namespace_whitespace&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_mixed_echo_print&#x27; =&gt; array(&#x27;use&#x27; =&gt; &#x27;echo&#x27;),</span>        <span class="hljs-string">&#x27;no_multiline_whitespace_around_double_arrow&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;no_short_bool_cast&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_singleline_whitespace_before_semicolons&#x27; =&gt; true,</span>        <span class="hljs-string">&#x27;no_spaces_around_offset&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;no_trailing_comma_in_list_call&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_trailing_comma_in_singleline_array&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_unneeded_control_parentheses&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;no_unused_imports&#x27; =&gt; true,</span>        <span class="hljs-string">&#x27;no_whitespace_before_comma_in_array&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;no_whitespace_in_blank_line&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;normalize_index_brace&#x27; =&gt; true,</span>        <span class="hljs-string">&#x27;object_operator_without_whitespace&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;php_unit_fqcn_annotation&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_align&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_annotation_without_dot&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_indent&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_inline_tag&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_no_access&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_no_alias_tag&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_no_empty_return&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_no_package&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_no_useless_inheritdoc&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_return_self_reference&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_scalar&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_separation&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_single_line_var_spacing&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_summary&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_to_comment&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_trim&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_types&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;phpdoc_var_without_name&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;increment_style&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;return_type_declaration&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;self_accessor&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;short_scalar_cast&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;single_blank_line_before_namespace&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;single_class_element_per_statement&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;space_after_semicolon&#x27; =&gt; true,</span>        <span class="hljs-comment">// &#x27;standardize_not_equals&#x27; =&gt; true,</span>        <span class="hljs-string">&#x27;ternary_operator_spaces&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;trailing_comma_in_multiline&#x27; =&gt; [&#x27;elements&#x27; =&gt; [&#x27;arrays&#x27;]],</span>        <span class="hljs-string">&#x27;trim_array_spaces&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;unary_operator_spaces&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;whitespace_after_comma_in_array&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-string">&#x27;space_after_semicolon&#x27;</span> =&gt; <span class="hljs-literal">true</span>,        <span class="hljs-comment">// &#x27;single_blank_line_at_eof&#x27; =&gt; false</span>    ])    <span class="hljs-comment">// -&gt;setIndent(&quot;\t&quot;)</span>    -&gt;<span class="hljs-title function_ invoke__">setLineEnding</span>(<span class="hljs-string">&quot;\n&quot;</span>);</code></pre></div><p>如果你使用的是Laravel，也可以使用我的慣用設定檔</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$rules</span> = [    <span class="hljs-string">&#x27;@Symfony&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;whitespace_after_comma_in_array&#x27;</span> =&gt; [<span class="hljs-string">&#x27;ensure_single_space&#x27;</span> =&gt; <span class="hljs-literal">true</span>],    <span class="hljs-string">&#x27;cast_spaces&#x27;</span> =&gt; [<span class="hljs-string">&#x27;space&#x27;</span> =&gt; <span class="hljs-string">&#x27;none&#x27;</span>],    <span class="hljs-string">&#x27;ordered_class_elements&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-comment">// &#x27;method_argument_space&#x27; =&gt; true,</span>    <span class="hljs-string">&#x27;list_syntax&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;no_useless_return&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;explicit_string_variable&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;yoda_style&#x27;</span> =&gt; <span class="hljs-literal">false</span>,    <span class="hljs-string">&#x27;no_useless_else&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;global_namespace_import&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;combine_consecutive_unsets&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;declare_equal_normalize&#x27;</span> =&gt; [<span class="hljs-string">&#x27;space&#x27;</span> =&gt; <span class="hljs-string">&#x27;single&#x27;</span>],    <span class="hljs-string">&#x27;concat_space&#x27;</span> =&gt; [<span class="hljs-string">&#x27;spacing&#x27;</span> =&gt; <span class="hljs-string">&#x27;one&#x27;</span>],    <span class="hljs-string">&#x27;ternary_to_null_coalescing&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;multiline_whitespace_before_semicolons&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;array_indentation&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;blank_line_before_statement&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;method_chaining_indentation&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-string">&#x27;phpdoc_to_comment&#x27;</span> =&gt; <span class="hljs-literal">false</span>,    <span class="hljs-string">&#x27;phpdoc_var_annotation_correct_order&#x27;</span> =&gt; <span class="hljs-literal">true</span>,    <span class="hljs-comment">// &#x27;phpdoc_add_missing_param_annotation&#x27; =&gt; true,</span>    <span class="hljs-comment">// &#x27;class_definition&#x27; =&gt; true,</span>];<span class="hljs-variable">$finder</span> = <span class="hljs-title class_">PhpCsFixer\Finder</span>::<span class="hljs-title function_ invoke__">create</span>();<span class="hljs-comment">// ignore laravel blade file</span><span class="hljs-variable">$finder</span>-&gt;<span class="hljs-title function_ invoke__">exclude</span>([<span class="hljs-string">&#x27;vendor&#x27;</span>])    -&gt;<span class="hljs-title function_ invoke__">notName</span>(<span class="hljs-string">&#x27;*.blade.php&#x27;</span>);<span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">PhpCsFixer\Config</span>())    -&gt;<span class="hljs-title function_ invoke__">setRules</span>(<span class="hljs-variable">$rules</span>)    -&gt;<span class="hljs-title function_ invoke__">setIndent</span>(<span class="hljs-string">&#x27;    &#x27;</span>)    -&gt;<span class="hljs-title function_ invoke__">setLineEnding</span>(<span class="hljs-string">&quot;\n&quot;</span>)    -&gt;<span class="hljs-title function_ invoke__">setFinder</span>(<span class="hljs-variable">$finder</span>);</code></pre></div><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Elementary OS 7 (Ubuntu 22.04)</li><li>PHP 7.4</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/">https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/</a></li><li><a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer">https://github.com/PHP-CS-Fixer/PHP-CS-Fixer</a></li><li><a href="https://github.com/junstyle/vscode-php-cs-fixer">https://github.com/junstyle/vscode-php-cs-fixer</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[PHP] 在Linux中安裝Composer</title>
    <link href="/posts/20231206-composer-install-on-ubuntu/"/>
    <url>/posts/20231206-composer-install-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>Composer是一個用於管理PHP專案中相依套件的工具。它允許你在PHP專案中定義所需的套件及其版本，並將它們自動下載並下載到你的專案中。<br>這讓開發人員能夠更容易地管理專案所需的套件，並確保這些套件的版本能夠正確地滿足你的專案需求。</p><h2 id="一、安裝"><a href="#一、安裝" class="headerlink" title="一、安裝"></a>一、安裝</h2><ol><li><p>建立暫存資料夾並進入該資料夾</p> <div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> tmp &amp;&amp; <span class="hljs-built_in">cd</span> tmp</code></pre></div></li><li><p>從官網下載安裝檔</p> <div class="code-wrapper"><pre><code class="hljs bash">php -r <span class="hljs-string">&quot;copy(&#x27;https://getcomposer.org/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span></code></pre></div></li><li><p>驗證檔案是否正確<br> 執行後顯示<code>Installer verified</code>代表正確，顯示<code>Installer corrupt</code>代表檔案有錯誤，需要重新下載</p><blockquote><p>注意: 這個指令中的sha384值，可能會隨著composer版本的不同而改變，該指令請以<a href="https://getcomposer.org/download/">官方文件</a>中的指令為準</p></blockquote> <div class="code-wrapper"><pre><code class="hljs bash">php -r <span class="hljs-string">&quot;if (hash_file(&#x27;sha384&#x27;, &#x27;composer-setup.php&#x27;) === &#x27;e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02&#x27;) &#123; echo &#x27;Installer verified&#x27;; &#125; else &#123; echo &#x27;Installer corrupt&#x27;; unlink(&#x27;composer-setup.php&#x27;); &#125; echo PHP_EOL;&quot;</span></code></pre></div></li><li><p>安裝composer到<code>/usr/bin/composer</code>(可依照系統環境不同修改)</p> <div class="code-wrapper"><pre><code class="hljs bash">php composer-setup.php --install-dir=/usr/bin --filename=composer</code></pre></div></li><li><p>刪除下載的安裝檔</p> <div class="code-wrapper"><pre><code class="hljs bash">php -r <span class="hljs-string">&quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span></code></pre></div></li></ol><h2 id="二、檢查是否安裝成功"><a href="#二、檢查是否安裝成功" class="headerlink" title="二、檢查是否安裝成功"></a>二、檢查是否安裝成功</h2><p>執行以下指令：</p><div class="code-wrapper"><pre><code class="hljs bash">composer -V</code></pre></div><p>出現composer版本號則代表安裝成功</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Elementary OS 7 (Ubuntu 22.04)</li><li>PHP 7.4</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></li><li><a href="https://getcomposer.org/doc/00-intro.md">https://getcomposer.org/doc/00-intro.md</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Composer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Composer</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[MySQL] 使用RPM在Linux中離線安裝MySQL</title>
    <link href="/posts/20231127-mysql-offline-install-rhel/"/>
    <url>/posts/20231127-mysql-offline-install-rhel/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章將會說明如何在Linux中使用RPM安裝MySQL，並且這種安裝方式支援離線安裝，可以在與外界隔離的環境下不依賴套件管理工具進行安裝。</p><h2 id="安裝流程"><a href="#安裝流程" class="headerlink" title="安裝流程"></a>安裝流程</h2><h3 id="一、下載安裝包-RPM"><a href="#一、下載安裝包-RPM" class="headerlink" title="一、下載安裝包(RPM)"></a>一、下載安裝包(RPM)</h3><ol><li>下載安裝包<br>按照需求到<a href="https://downloads.mysql.com/archives/community/">這裡</a>下載相對應版本的RPM包<br><img src="https://i.imgur.com/SCp9IMi.png"></li></ol><h3 id="二、安裝MySQL"><a href="#二、安裝MySQL" class="headerlink" title="二、安裝MySQL"></a>二、安裝MySQL</h3><ol><li><p>將tar檔上傳到server上</p></li><li><p>解壓縮tar檔</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> mysqltar xvf mysql-5.7.35-1.el7.x86_64.rpm-bundle.tar -C ./mysql<span class="hljs-built_in">cd</span> mysql<span class="hljs-built_in">ls</span> -alh</code></pre></div><p><img src="https://i.imgur.com/yZjlwjk.png"></p></li><li><p>安裝rpm包</p><div class="code-wrapper"><pre><code class="hljs bash">rpm -ivh mysql-community-client* --nodeps --forcerpm -ivh mysql-community-common* --nodeps --forcerpm -ivh mysql-community-libs* --nodeps --forcerpm -ivh mysql-community-server* --nodeps --force</code></pre></div></li><li><p>確認安裝包</p><div class="code-wrapper"><pre><code class="hljs bash">rpm -qa | grep mysql</code></pre></div><p><img src="https://i.imgur.com/owJN2i2.png"></p></li><li><p>啟動MySQL，並確認啟動成功</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl start mysqldsystemctl status mysqld</code></pre></div></li><li><p>查看root密碼<br>預設的root密碼會在&#x2F;var&#x2F;log&#x2F;mysqld.log裡</p><div class="code-wrapper"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;A temporary password&quot;</span> /var/log/mysqld.log</code></pre></div><p><img src="https://i.imgur.com/HcbVgie.png"></p></li><li><p>初始化資料庫</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># mysql_secure_installation</span>New password: NEW_PASSWORDRe-enter new password: NEW_PASSWORDChange the password <span class="hljs-keyword">for</span> root ? NDo you wish to <span class="hljs-built_in">continue</span> with the password provided? YRemove anonymous <span class="hljs-built_in">users</span>? (Press y|Y <span class="hljs-keyword">for</span> Yes, any other key <span class="hljs-keyword">for</span> No) : YDisallow root login remotely? (Press y|Y <span class="hljs-keyword">for</span> Yes, any other key <span class="hljs-keyword">for</span> No) : YRemove <span class="hljs-built_in">test</span> database and access to it? (Press y|Y <span class="hljs-keyword">for</span> Yes, any other key <span class="hljs-keyword">for</span> No) : YReload privilege tables now? (Press y|Y <span class="hljs-keyword">for</span> Yes, any other key <span class="hljs-keyword">for</span> No) : Y</code></pre></div><p><img src="https://i.imgur.com/WnkqqqH.png"></p></li><li><p>修改root密碼</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;NEW_PASSWORD&#x27;</span>;FLUSH PRIVILEGES;</code></pre></div></li></ol><h3 id="三、設定防火牆"><a href="#三、設定防火牆" class="headerlink" title="三、設定防火牆"></a>三、設定防火牆</h3><ol><li><p>查看防火牆狀態</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl status firewalld</code></pre></div></li><li><p>查詢是否有mysql服務名稱</p><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --get-services | grep mysql</code></pre></div><p><img src="https://i.imgur.com/qKgTwa1.png"></p></li><li><p>將mysql服務永久設定到public中</p></li></ol><ul><li><p>有服務名稱：</p><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --zone=public --permanent --add-service=mysql</code></pre></div><p><img src="https://i.imgur.com/eMYEAYb.png"></p></li><li><p>沒有服務名稱：</p><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --zone=public --permanent --add-port=3306/tcp</code></pre></div></li></ul><ol start="5"><li>查看public的永久設定值<div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --zone=public --permanent --list-services</code></pre></div><img src="https://i.imgur.com/chQVHzO.png"></li></ol><h2 id="資料庫操作"><a href="#資料庫操作" class="headerlink" title="資料庫操作"></a>資料庫操作</h2><h3 id="一、建立使用者"><a href="#一、建立使用者" class="headerlink" title="一、建立使用者"></a>一、建立使用者</h3><ol><li><p>從外部sql檔執行語法</p><div class="code-wrapper"><pre><code class="hljs bash">mysql -uroot -p --default-character-set=utf8 &lt;SQL_FILE</code></pre></div></li><li><p>建立使用者</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;CLIENT_IP&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;NEW_PASSWORD&#x27;</span>;FLUSH PRIVILEGES;</code></pre></div></li><li><p>設定密碼不過期</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;FLUSH PRIVILEGES;</code></pre></div></li><li><p>給予全部權限</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> `DB_NAME`.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;CLIENT_IP&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;NEW_PASSWORD&#x27;</span>;FLUSH PRIVILEGES;</code></pre></div></li><li><p>查看使用者清單</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>, host <span class="hljs-keyword">FROM</span> mysql.user;</code></pre></div></li><li><p>查看授權</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;CLIENT_IP&#x27;</span>;</code></pre></div></li><li><p>限縮權限<br>先移除所有權限，再重新賦予</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;CLIENT_IP&#x27;</span>;<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>,<span class="hljs-keyword">UPDATE</span>,<span class="hljs-keyword">INSERT</span>,<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> `DB_NAME`.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;usernamep&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> PASSWORD <span class="hljs-string">&#x27;password&#x27;</span>;FLUSH PRIVILEGES;</code></pre></div></li><li><p>刪除使用者</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> mysql.user <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;USERNAME&#x27;</span> <span class="hljs-keyword">AND</span> host<span class="hljs-operator">=</span><span class="hljs-string">&#x27;HOST&#x27;</span>;FLUSH PRIVILEGES;</code></pre></div></li></ol><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Red Hat Enterprise Linux 7</li><li>MySQL 5.7.35</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://blog.gtwang.org/linux/centos-7-firewalld-command-setup-tutorial/2/">https://blog.gtwang.org/linux/centos-7-firewalld-command-setup-tutorial/2/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[資訊安全] 雜湊、編碼與加密的區別</title>
    <link href="/posts/20231117-security-hash-encoding-and-encryption/"/>
    <url>/posts/20231117-security-hash-encoding-and-encryption/</url>
    
    <content type="html"><![CDATA[<h3 id="雜湊不等於編碼，編碼不等於加密，加密也不是雜湊"><a href="#雜湊不等於編碼，編碼不等於加密，加密也不是雜湊" class="headerlink" title="雜湊不等於編碼，編碼不等於加密，加密也不是雜湊!!!"></a>雜湊不等於編碼，編碼不等於加密，加密也不是雜湊!!!</h3><p>為甚麼要提這件事呢?<br>請先看這篇新聞：</p><blockquote><p>國民黨台中市議員李中昨在議會質詢，秀出「近12個月交通違規檢舉量前20名」的名單。不過檢舉人的身分證字號竟只用Base64編碼轉換，長期協助企業資安保護的資安人員透露，取得身分證字號再搭配先前外洩的戶政資料，檢舉人的人身安全堪憂。…</p><p>資料來源：<a href="https://udn.com/news/story/7314/7490929">聯合新聞網</a></p></blockquote><p>這件事簡單來說，就是工程師想把資料保護起來，但錯把Base64當作加密方法使用，把一個只能「轉換顯示格式」的方法，用在身分證上。<br>結果看到這些文字的人，完全不需要key(密鑰)來解密，只要經過人人都可以的還原(解碼)動作，原本的身分證就顯露出來了。<br>其實這也不是第一次發生的事情了，很多對資訊領域不甚了解的人，甚至有「部分」的資訊領域工程師仍然不具備相關的知識素養。<br>所以本篇文章就好好說明雜湊、編碼與加密的區別。</p><h3 id="一、雜湊-Hash"><a href="#一、雜湊-Hash" class="headerlink" title="一、雜湊(Hash)"></a>一、雜湊(Hash)</h3><p>透過雜湊演算法將資料打亂並混合取得一個固定長度的雜湊值(Hash Values)<br>具有不可逆的特性<br>且來源資料只要有任何變動<br>生成的雜湊值也會不同<br>通常用來驗證資料的來源是否相同</p><p>例如比對檔案是否有被修改過<br>或是利用不可逆的特性<br>來存放資料庫中的密碼<br>藉此保護使用者的資料</p><p>常見的雜湊方式有：MD5(<a href="https://zh.wikipedia.org/zh-tw/MD5#%E7%BC%BA%E9%99%B7">不安全且有衝突問題</a>)、SHA-1(<a href="https://zh.wikipedia.org/zh-tw/SHA-1#SHA-1%E7%9A%84%E7%A0%B4%E8%A7%A3">不建議使用</a>)、SHA-256等</p><h3 id="二、編碼-Encoding"><a href="#二、編碼-Encoding" class="headerlink" title="二、編碼(Encoding)"></a>二、編碼(Encoding)</h3><p>定義相當廣泛<br>只要是將資料從一種型態轉變成另外一種形式<br>且過程可逆就可以算編碼<br>在資訊的領域中比較常用到的<br>是將各種字元轉譯成一個固定的格式用來方便儲存、傳輸</p><p>例如資料庫編碼無法儲存特殊字元時<br>透過Base64轉換成只有英數字的格式就能夠儲存了<br>或是網址無法接受空白或是一些特殊字元<br>也可以透過URL Encode變成網址支援的編碼<br>來讓網頁可以順利透過get方式傳遞資料</p><p>常見的編碼方式有：<a href="https://zh.wikipedia.org/zh-tw/Base64">Base64</a></p><h3 id="三、加密-Encryption"><a href="#三、加密-Encryption" class="headerlink" title="三、加密(Encryption)"></a>三、加密(Encryption)</h3><p>加密是編碼的一種類型<br>它需要使用密鑰(Key)將原始資料轉換為密文<br>並且這個過程也是可逆的<br>只要擁有正確的密鑰(Key)<br>就能夠將密文轉換為原始資料<br>加密常被用於保護敏感資料<br>例如信用卡資訊、個人資料等</p><p>常見的加密方式有：<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">AES</a></p><h3 id="四、比較"><a href="#四、比較" class="headerlink" title="四、比較"></a>四、比較</h3><table><thead><tr><th align="center"></th><th align="center">雜湊</th><th align="center">編碼</th><th align="center">加密</th></tr></thead><tbody><tr><td align="center">是否可逆</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">是否可以保護原始資料</td><td align="center">否，僅能比對是否相同</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">長度是否固定</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">主要用途</td><td align="center">快速比對資料是否相同</td><td align="center">使資料便於傳輸與儲存</td><td align="center">保護機敏資料</td></tr><tr><td align="center">具體用途</td><td align="center">1. 保存密碼 <br>2.比對檔案是否一致</td><td align="center">Http Get傳輸資料</td><td align="center">保護資料庫資料</td></tr></tbody></table><h3 id="五、結語"><a href="#五、結語" class="headerlink" title="五、結語"></a>五、結語</h3><p>總結來說<br>雜湊、編碼和加密雖然在資訊安全中扮演不同的角色<br>但很多人往往容易搞混它們的用途<br>例如用編碼或加密的方式儲存使用者密碼<br>這種在資料庫外洩的時候<br>就有可能造成使用者的密碼被駭客取得<br>這種事情已經發生過很多遍了<br>我們都應該要引以為戒才是</p>]]></content>
    
    
    <categories>
      
      <category>資訊安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>資訊安全</tag>
      
      <tag>Hash</tag>
      
      <tag>Encoding</tag>
      
      <tag>Encryption</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Vue] 解決使用Vue.Draggable排序表格無效問題</title>
    <link href="/posts/20231113-vue-draggable-table-useless/"/>
    <url>/posts/20231113-vue-draggable-table-useless/</url>
    
    <content type="html"><![CDATA[<h3 id="一、問題"><a href="#一、問題" class="headerlink" title="一、問題"></a>一、問題</h3><p>在使用<a href="https://github.com/RubaXa/Sortable">Sortable.js</a>的Vue.js版本套件<a href="https://github.com/SortableJS/Vue.Draggable">Vue.Draggable</a>時<br>遇到排序div區塊沒問題，但是排序table就沒辦法拖曳排序的問題<br>程式碼如下：</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">draggable</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;products&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;tbody&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">element</span>=<span class="hljs-string">&quot;tbody&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">handle</span>=<span class="hljs-string">&quot;.handle&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;product.id&quot;</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;move-icon&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 1.5rem&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">                </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">product.name</span> &#125;&#125;</span><span class="language-xml"></span><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">draggable</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span></code></pre></div><h3 id="二、原因"><a href="#二、原因" class="headerlink" title="二、原因"></a>二、原因</h3><p>因為這段程式碼寫在html模板的檔案中，而不是.vue檔<br>可以根據官方網站的<a href="https://v2.vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats">說明</a>修改<br>使用is特殊屬性：</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;tbody <span class="hljs-attribute">is</span>=<span class="hljs-string">&quot;draggable&quot;</span>&gt;</code></pre></div><p>可以達到與下列相同的效果</p><div class="code-wrapper"><pre><code class="hljs routeros">&lt;draggable <span class="hljs-attribute">tag</span>=<span class="hljs-string">&quot;tbody&quot;</span>&gt;</code></pre></div><h3 id="三、修正後的程式碼"><a href="#三、修正後的程式碼" class="headerlink" title="三、修正後的程式碼"></a>三、修正後的程式碼</h3><p>修正後的程式碼如下：</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">is</span>=<span class="hljs-string">&quot;draggable&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;products&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">element</span>=<span class="hljs-string">&quot;tbody&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">handle</span>=<span class="hljs-string">&quot;.handle&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;product.id&quot;</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;move-icon&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 1.5rem&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">                </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">product.name</span> &#125;&#125;</span><span class="language-xml"></span><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Batch] bat檔案進行資料備份</title>
    <link href="/posts/20231107-batch-backup-folder/"/>
    <url>/posts/20231107-batch-backup-folder/</url>
    
    <content type="html"><![CDATA[<p>對於在Windows系統中備份資料的需求<br>如果可以寫好一個批次檔，並使用工作排程定期複製檔案到指定目錄那就太方便了<br>以下是使用<code>xcopy</code>指令實現的一個簡易的bat檔教學</p><h2 id="教學"><a href="#教學" class="headerlink" title="教學"></a>教學</h2><h3 id="一、bat檔案"><a href="#一、bat檔案" class="headerlink" title="一、bat檔案"></a>一、bat檔案</h3><ol><li>backup.bat <div class="code-wrapper"><pre><code class="hljs dos">@<span class="hljs-built_in">ECHO</span> OFF<span class="hljs-comment"></span><span class="hljs-comment">@REM 指定語系為UTF-8</span><span class="hljs-built_in">chcp</span> <span class="hljs-number">65001</span><span class="hljs-keyword">IF</span> &quot;%<span class="hljs-number">1</span>&quot; == &quot;&quot; (<span class="hljs-built_in">SET</span> /P source=&quot;請輸入要備份的資料夾絕對路徑：&quot;) <span class="hljs-keyword">ELSE</span> (<span class="hljs-built_in">SET</span> source=%~<span class="hljs-number">1</span>)<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXIST</span> &quot;<span class="hljs-variable">%source%</span>\&quot; (<span class="hljs-built_in">ECHO</span> 路徑不存在<span class="hljs-built_in">PAUSE</span><span class="hljs-keyword">EXIT</span>)<span class="hljs-keyword">IF</span> &quot;%<span class="hljs-number">2</span>&quot; == &quot;&quot; (<span class="hljs-built_in">SET</span> /P target=&quot;請輸入存放備份資料的絕對路徑：&quot;) <span class="hljs-keyword">ELSE</span> (<span class="hljs-built_in">SET</span> target=%~<span class="hljs-number">2</span>)<span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXIST</span> &quot;<span class="hljs-variable">%target%</span>\&quot; (choice /c Yn /m &quot;目標路徑已經存在檔案，是否覆蓋?&quot;<span class="hljs-comment"></span><span class="hljs-comment">@REM 錯誤的條件</span><span class="hljs-keyword">IF</span> <span class="hljs-keyword">ERRORLEVEL</span> <span class="hljs-number">255</span> <span class="hljs-keyword">GOTO</span> CLOSE<span class="hljs-comment">@REM 選擇不覆蓋</span><span class="hljs-keyword">IF</span> <span class="hljs-keyword">ERRORLEVEL</span> <span class="hljs-number">2</span> <span class="hljs-keyword">GOTO</span> CLOSE<span class="hljs-comment">@REM 選擇繼續備份</span><span class="hljs-keyword">IF</span> <span class="hljs-keyword">ERRORLEVEL</span> <span class="hljs-number">1</span> <span class="hljs-keyword">GOTO</span> CONTINUE<span class="hljs-comment"></span><span class="hljs-comment">@REM 取消指令</span><span class="hljs-keyword">IF</span> <span class="hljs-keyword">ERRORLEVEL</span> <span class="hljs-number">0</span> <span class="hljs-keyword">GOTO</span> CLOSE:CLOSE<span class="hljs-built_in">ECHO</span> 取消備份<span class="hljs-built_in">PAUSE</span><span class="hljs-keyword">EXIT</span>:CONTINUE<span class="hljs-built_in">ECHO</span> 將覆蓋目標路徑檔案<span class="hljs-built_in">PAUSE</span>)<span class="hljs-built_in">xcopy</span> &quot;<span class="hljs-variable">%source%</span>&quot; &quot;<span class="hljs-variable">%target%</span>&quot; /s /e /h /i /c /y<span class="hljs-built_in">ECHO</span> 檔案備份完成<span class="hljs-built_in">PAUSE</span></code></pre></div> 請注意這個bat檔案的編碼格式<span style="color:#df5000">要存成UTF-8</span><br> 或是存成其他編碼後修改<code>chcp</code>的設定<br> 才不會發生中文亂碼的問題</li></ol><h3 id="二、使用方式"><a href="#二、使用方式" class="headerlink" title="二、使用方式"></a>二、使用方式</h3><ol><li><p>直接在指令中輸入備份資料夾與目標資料夾</p> <div class="code-wrapper"><pre><code class="hljs lsl">backup.bat <span class="hljs-string">&quot;C:<span class="hljs-subst">\t</span>est\source&quot;</span> <span class="hljs-string">&quot;C:<span class="hljs-subst">\t</span>est<span class="hljs-subst">\t</span>arget&quot;</span></code></pre></div></li><li><p>直接左鍵點擊兩下檔案，使用交互式命令列輸入目標資料夾<br><img src="https://hackmd.io/_uploads/H1jSZ3876.png" alt="image.png"></p></li></ol><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://learn.microsoft.com/zh-tw/windows-server/administration/windows-commands/xcopy">https://learn.microsoft.com/zh-tw/windows-server/administration/windows-commands/xcopy</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Batch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Batch</tag>
      
      <tag>bat</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Laravel] 使用Supervisor執行Laravel的Queue Worker</title>
    <link href="/posts/20231105-laravel-queue-with-supervisor/"/>
    <url>/posts/20231105-laravel-queue-with-supervisor/</url>
    
    <content type="html"><![CDATA[<p>在使用laravel中的Queue job的時候，除了程式本身寫好之外<br>伺服器環境還會需要確保Laravel的<code>queue:work</code>指令可以持續進行<br>如果中斷還可以重新啟動<br>這個時候就會需要用到Supervisor這個工具了</p><h2 id="一、安裝Supervisor"><a href="#一、安裝Supervisor" class="headerlink" title="一、安裝Supervisor"></a>一、安裝Supervisor</h2><div class="code-wrapper"><pre><code class="hljs bash">apt updateapt install supervisor</code></pre></div><h2 id="二、啟動Supervisor"><a href="#二、啟動Supervisor" class="headerlink" title="二、啟動Supervisor"></a>二、啟動Supervisor</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># supervisord -c &lt;設定檔路徑&gt; (預設/etc/supervisor/supervisord.conf)</span>supervisord -c /etc/supervisor/supervisord.conf</code></pre></div><h2 id="三、建立queue-worker設定檔"><a href="#三、建立queue-worker設定檔" class="headerlink" title="三、建立queue worker設定檔"></a>三、建立queue worker設定檔</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/supervisor/conf.dvim laravel-worker.conf</code></pre></div><p>設定檔內容(註解要刪除)</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[program:laravel-worker-my-project]</span><span class="hljs-attr">process_name</span>=%(program_name)s_%(process_num)<span class="hljs-number">02</span>d<span class="hljs-comment"># command=php &lt;專案資料夾路徑&gt;/artisan queue:work --sleep=&lt;每次嘗試間隔&gt; --tries=&lt;最多嘗試次數&gt;</span><span class="hljs-attr">command</span>=php /var/www/my-project/artisan queue:work --sleep=<span class="hljs-number">3</span> --tries=<span class="hljs-number">3</span><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span><span class="hljs-attr">user</span>=root<span class="hljs-attr">numprocs</span>=<span class="hljs-number">2</span><span class="hljs-attr">startsecs</span>=<span class="hljs-number">0</span><span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span><span class="hljs-comment"># stdout_logfile=&lt;log檔案路徑&gt;</span><span class="hljs-attr">stdout_logfile</span>=/var/log/supervisor/laravel-worker-my-project.log<span class="hljs-comment"># logfile_maxbytes=&lt;LOG檔案上限&gt;</span><span class="hljs-attr">logfile_maxbytes</span>=<span class="hljs-number">104857600</span><span class="hljs-attr">stopwaitsecs</span>=<span class="hljs-number">3600</span></code></pre></div><h2 id="四、載入設定檔並啟用"><a href="#四、載入設定檔並啟用" class="headerlink" title="四、載入設定檔並啟用"></a>四、載入設定檔並啟用</h2><div class="code-wrapper"><pre><code class="hljs bash">supervisorctl rereadsupervisorctl updatesupervisorctl restart laravel-worker-my-project:*</code></pre></div><h2 id="五、查看服務是否啟用"><a href="#五、查看服務是否啟用" class="headerlink" title="五、查看服務是否啟用"></a>五、查看服務是否啟用</h2><div class="code-wrapper"><pre><code class="hljs bash">supervisorctl status</code></pre></div><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>OS: Ubuntu 18.04</li></ul>]]></content>
    
    
    <categories>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
      <tag>Queue</tag>
      
      <tag>job</tag>
      
      <tag>Supervisor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Laravel] 設定並上傳檔案到AWS S3</title>
    <link href="/posts/20231104-laravel-s3-setting/"/>
    <url>/posts/20231104-laravel-s3-setting/</url>
    
    <content type="html"><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>Simple Storage Service (S3) 是 AWS 最常應用到的服務，只要是需要將檔案上傳到雲端的狀況都可以使用S3，本篇文章將介紹如何設定與透過Laravel使用AWS S3。</p><h2 id="設定AWS-S3-Simple-Storage-Service"><a href="#設定AWS-S3-Simple-Storage-Service" class="headerlink" title="設定AWS S3(Simple Storage Service)"></a>設定AWS S3(Simple Storage Service)</h2><h4 id="官方說明文件"><a href="#官方說明文件" class="headerlink" title="官方說明文件"></a>官方說明文件</h4><p><a href="https://laravel-news.com/using-s3-with-laravel">https://laravel-news.com/using-s3-with-laravel</a><br><a href="https://youtu.be/FLIp6BLtwjk">https://youtu.be/FLIp6BLtwjk</a></p><h3 id="一、建立儲存體"><a href="#一、建立儲存體" class="headerlink" title="一、建立儲存體"></a>一、建立儲存體</h3><ol><li><p>開啟S3設定頁面<br><a href="https://s3.console.aws.amazon.com/s3">https://s3.console.aws.amazon.com/s3</a></p></li><li><p>建立儲存槽<br><img src="https://i.imgur.com/Vj420lX.png"></p></li><li><p>設定儲存體<br><img src="https://i.imgur.com/0to4DZ9.png"><br><img src="https://i.imgur.com/PYBZnws.png"><br><img src="https://i.imgur.com/VEuwMS5.png"></p></li></ol><h3 id="二、新增IAM用戶"><a href="#二、新增IAM用戶" class="headerlink" title="二、新增IAM用戶"></a>二、新增IAM用戶</h3><ol><li><p>開啟IAM儀表板<br><img src="https://i.imgur.com/IppklGs.png"></p></li><li><p>新增使用者<br><img src="https://i.imgur.com/mFrqx65.png"><br><img src="https://i.imgur.com/ZbFTNpo.png"></p></li><li><p>設定使用者名稱並選取類型為「存取金鑰」<br><img src="https://i.imgur.com/9w0V1oi.png"></p></li><li><p>一路點選下一步，不要修改任何東西直到建立完成，並<strong>記錄下此處顯示的金鑰</strong><br><img src="https://i.imgur.com/3IsVswI.png"></p></li><li><p>添加內嵌政策<br><img src="https://i.imgur.com/BouaCWR.png"><br><img src="https://i.imgur.com/9bGaczG.png"></p></li><li><p>選擇json編輯器貼入以下內容(From <a href="https://flysystem.thephpleague.com/v1/docs/adapter/aws-s3-v3/">Flysystem docs</a>)</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;Version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2012-10-17&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;Statement&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;Sid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Stmt1420044805001&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;Effect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Allow&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;Action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                <span class="hljs-string">&quot;s3:ListBucket&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;s3:GetObject&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;s3:GetObjectAcl&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;s3:PutObject&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;s3:PutObjectAcl&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;s3:ReplicateObject&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;s3:DeleteObject&quot;</span>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;Resource&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                <span class="hljs-string">&quot;arn:aws:s3:::your-bucket-name&quot;</span><span class="hljs-punctuation">,</span>                <span class="hljs-string">&quot;arn:aws:s3:::your-bucket-name/*&quot;</span>            <span class="hljs-punctuation">]</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div></li><li><p>修改<code>Statement.Resource</code>的內容，將名稱改為剛剛建立的儲存體名稱後點選「檢閱政策」<br><img src="https://i.imgur.com/csd7fvt.png"></p></li><li><p>填寫名稱後按下「建立政策」<br><img src="https://i.imgur.com/lzanZvw.png"></p></li></ol><h2 id="Larvel使用MediaLibrary串接AWS-S3"><a href="#Larvel使用MediaLibrary串接AWS-S3" class="headerlink" title="Larvel使用MediaLibrary串接AWS S3"></a>Larvel使用MediaLibrary串接AWS S3</h2><h3 id="一、設定Laravel-可參考官方文件"><a href="#一、設定Laravel-可參考官方文件" class="headerlink" title="一、設定Laravel(可參考官方文件)"></a>一、設定Laravel(可參考<a href="https://spatie.be/docs/laravel-medialibrary/v10/introduction">官方文件</a>)</h3><ol><li><p>新增migration並執行</p><div class="code-wrapper"><pre><code class="hljs bash">php artisan vendor:publish --provider=<span class="hljs-string">&quot;Spatie\MediaLibrary\MediaLibraryServiceProvider&quot;</span> --tag=<span class="hljs-string">&quot;migrations&quot;</span>php artisan migration</code></pre></div></li><li><p>執行seeder</p><div class="code-wrapper"><pre><code class="hljs bash">php artisan db:seed --class=MediaTempSeeder</code></pre></div></li><li><p>新增設定檔案</p><div class="code-wrapper"><pre><code class="hljs bash">php artisan vendor:publish --provider=<span class="hljs-string">&quot;Spatie\MediaLibrary\MediaLibraryServiceProvider&quot;</span> --tag=<span class="hljs-string">&quot;config&quot;</span></code></pre></div></li><li><p>設定.env</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">AWS_ACCESS_KEY_ID</span>=&lt;public key&gt;<span class="hljs-attr">AWS_SECRET_ACCESS_KEY</span>=&lt;private key&gt;<span class="hljs-attr">AWS_DEFAULT_REGION</span>=&lt;儲存體伺服器&gt;<span class="hljs-attr">AWS_BUCKET</span>=&lt;儲存體名稱&gt;<span class="hljs-attr">AWS_USE_PATH_STYLE_ENDPOINT</span>=<span class="hljs-literal">true</span><span class="hljs-attr">MEDIA_DISK</span>=medialibrary<span class="hljs-attr">MEDIA_LIBRARY_ROOT</span>=media_development</code></pre></div></li></ol><h3 id="二、上傳到本地"><a href="#二、上傳到本地" class="headerlink" title="二、上傳到本地"></a>二、上傳到本地</h3><ol><li><p>設定.env</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">MEDIA_DISK</span>=public</code></pre></div></li><li><p>執行指令</p><div class="code-wrapper"><pre><code class="hljs bash">php artisan storage:<span class="hljs-built_in">link</span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
      <tag>PHP</tag>
      
      <tag>AWS</tag>
      
      <tag>S3</tag>
      
      <tag>MediaLibrary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[PHP] PHP 連接SQL Server(MsSQL) on Windows</title>
    <link href="/posts/20231102-php-mssql-windows/"/>
    <url>/posts/20231102-php-mssql-windows/</url>
    
    <content type="html"><![CDATA[<p>註：這裡也有<a href="/posts/20231102-php-oracle-windows/" title="[PHP] 連線Oracle DB on Windows">Oracle的連接方式</a></p><h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><h3 id="一、-安裝-ODBC-Driver-for-SQL-Server"><a href="#一、-安裝-ODBC-Driver-for-SQL-Server" class="headerlink" title="一、 安裝 ODBC Driver for SQL Server"></a>一、 安裝 ODBC Driver for SQL Server</h3><ol><li>到<a href="https://docs.microsoft.com/zh-tw/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15">https://docs.microsoft.com/zh-tw/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15</a>下載驅動</li><li>開啟下載下來的<code>msodbcsql.msi</code>，並一路安裝完成<br><img src="https://i.imgur.com/3p4QS0H.png"></li></ol><h3 id="二、-引用dll檔案"><a href="#二、-引用dll檔案" class="headerlink" title="二、 引用dll檔案"></a>二、 引用dll檔案</h3><ol><li>將以下檔案放到&#x2F;php&#x2F;ext&#x2F;底下<ul><li>php_pdo_sqlsrv_74_nts_x64.dll</li><li>php_pdo_sqlsrv_74_ts_x64.dll</li><li>php_sqlsrv_74_nts_x64.dll</li><li>php_sqlsrv_74_ts_x64.dll</li></ul></li><li>編輯php.ini，加入以下內容<div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">extension</span>=sqlsrv_74_ts_x64<span class="hljs-attr">extension</span>=sqlsrv_74_nts_x64<span class="hljs-attr">extension</span>=pdo_sqlsrv_74_ts_x64<span class="hljs-attr">extension</span>=pdo_sqlsrv_74_nts_x64</code></pre></div></li><li>儲存php.ini後，重新啟動Apache</li></ol><h2 id="PHP串接"><a href="#PHP串接" class="headerlink" title="PHP串接"></a>PHP串接</h2><h3 id="一、連線設定-CodeIgniter-3-1-16"><a href="#一、連線設定-CodeIgniter-3-1-16" class="headerlink" title="一、連線設定(CodeIgniter 3.1.16)"></a>一、連線設定(CodeIgniter 3.1.16)</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;hostname&#x27;</span> =&gt; <span class="hljs-variable">$host</span> . <span class="hljs-string">&#x27;,&#x27;</span> . <span class="hljs-variable">$port</span>,    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$user</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$password</span>,    <span class="hljs-string">&#x27;database&#x27;</span> =&gt; <span class="hljs-variable">$dbname</span>,    <span class="hljs-string">&#x27;dbdriver&#x27;</span> =&gt; <span class="hljs-string">&#x27;sqlsrv&#x27;</span>,    <span class="hljs-string">&#x27;dbprefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;pconnect&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;db_debug&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;cache_on&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;cachedir&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;char_set&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;char_set,    <span class="hljs-string">&#x27;dbcollat&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;dbcollat,    <span class="hljs-string">&#x27;swap_pre&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;encrypt&#x27;</span>  =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;compress&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;stricton&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;failover&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(),    <span class="hljs-string">&#x27;save_queries&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;save_queries);<span class="hljs-keyword">try</span> &#123;    <span class="hljs-variable">$db</span> = @<span class="hljs-variable language_">$this</span>-&gt;load-&gt;<span class="hljs-title function_ invoke__">database</span>(<span class="hljs-variable">$config</span>, <span class="hljs-literal">true</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$db</span>-&gt;conn_id)) &#123;        <span class="hljs-comment">// 連線失敗</span>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">error</span>()[<span class="hljs-string">&#x27;message&#x27;</span>];    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 連線成功</span>    &#125;&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;    <span class="hljs-comment">// 出現例外</span>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();&#125;</code></pre></div><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10</li><li>PHP 7.4.9</li><li>CodeIgniter 3.1.16</li><li>Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CodeIgniter</tag>
      
      <tag>Windows</tag>
      
      <tag>MsSQL</tag>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[PHP] 連線Oracle DB on Windows</title>
    <link href="/posts/20231102-php-oracle-windows/"/>
    <url>/posts/20231102-php-oracle-windows/</url>
    
    <content type="html"><![CDATA[<p>註：這裡也有<a href="/posts/20231102-php-mssql-windows/" title="[PHP] PHP 連接SQL Server(MsSQL) on Windows">SQL Server(MsSQL)的連接方式</a></p><h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><h3 id="一、安裝Oracle-Instant-Client-x64-Windows"><a href="#一、安裝Oracle-Instant-Client-x64-Windows" class="headerlink" title="一、安裝Oracle Instant Client(x64 Windows)"></a>一、安裝Oracle Instant Client(x64 Windows)</h3><ol><li><p>到<a href="https://www.oracle.com/uk/database/technologies/instant-client/winx64-64-downloads.html">此網頁</a>下載「Basic Packge」<br><img src="https://i.imgur.com/HZYKSB0.png"></p></li><li><p>解壓縮到資料夾<br><img src="https://i.imgur.com/2m41miQ.png"></p></li><li><p>新增環境變數<br><code>C:\instantclient_21_3</code><br><img src="https://i.imgur.com/oEvZ9tf.png"></p></li></ol><h3 id="二、安裝PHP擴展"><a href="#二、安裝PHP擴展" class="headerlink" title="二、安裝PHP擴展"></a>二、安裝PHP擴展</h3><ol><li><p>將「php_oci8_12c.dll」放入<code>/php/ext/</code><br><code>12c</code>代表Oracle版本<br><img src="https://i.imgur.com/hhftZ3O.png"></p></li><li><p>將php.ini中的「;extension&#x3D;oci8_12c」註解取消<br><img src="https://i.imgur.com/2f0sQ3z.png"></p></li><li><p>重新啟動Apache或其他Web Server以重新載入php.ini的設定</p></li></ol><h2 id="PHP串接"><a href="#PHP串接" class="headerlink" title="PHP串接"></a>PHP串接</h2><h3 id="一、-連線設定-CodeIgniter-3-1-10"><a href="#一、-連線設定-CodeIgniter-3-1-10" class="headerlink" title="一、 連線設定(CodeIgniter 3.1.10)"></a>一、 連線設定(CodeIgniter 3.1.10)</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$host</span> = <span class="hljs-string">&#x27;[SERVER_HOST]&#x27;</span>;<span class="hljs-variable">$port</span> = <span class="hljs-string">&#x27;[SERVER_PORT]&#x27;</span>;<span class="hljs-variable">$service_name</span> = <span class="hljs-string">&#x27;[SERVICE_NAME]&#x27;</span>;<span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;[ACCOUNT]&#x27;</span>;<span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;[PASSWORD]&#x27;</span>;<span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;hostname&#x27;</span> =&gt; <span class="hljs-string">&quot;<span class="hljs-subst">$host</span>:<span class="hljs-subst">$port</span>/<span class="hljs-subst">$service_name</span>&quot;</span>,    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$user</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$password</span>,    <span class="hljs-string">&#x27;database&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;dbdriver&#x27;</span> =&gt; <span class="hljs-string">&#x27;oci8&#x27;</span>,    <span class="hljs-string">&#x27;dbprefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;pconnect&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;db_debug&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;cache_on&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;cachedir&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;char_set&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;char_set,    <span class="hljs-string">&#x27;dbcollat&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;dbcollat,    <span class="hljs-string">&#x27;swap_pre&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;encrypt&#x27;</span>  =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;compress&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;stricton&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,    <span class="hljs-string">&#x27;failover&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(),    <span class="hljs-string">&#x27;save_queries&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;save_queries);<span class="hljs-keyword">try</span> &#123;    <span class="hljs-variable">$db</span> = @<span class="hljs-variable language_">$this</span>-&gt;load-&gt;<span class="hljs-title function_ invoke__">database</span>(<span class="hljs-variable">$config</span>, <span class="hljs-literal">true</span>);    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$db</span>-&gt;conn_id)) &#123;        <span class="hljs-comment">// 連接失敗</span>        <span class="hljs-comment">// 錯誤訊息</span>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">error</span>()[<span class="hljs-string">&#x27;message&#x27;</span>];    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 連接成功</span>    &#125;&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;    <span class="hljs-comment">// 連接時出現例外</span>    <span class="hljs-comment">// 例外訊息</span>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();&#125;</code></pre></div><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10</li><li>Wamp Server 3.2.3</li><li>PHP 7.4.9</li><li>CodeIgniter 3.1.16</li><li>Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production</li><li>instantclient_21_3</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CodeIgniter</tag>
      
      <tag>Windows</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Batch] 使用Windows批次檔(bat)快速修改PHP版本</title>
    <link href="/posts/20231101-batch-change-env-path/"/>
    <url>/posts/20231101-batch-change-env-path/</url>
    
    <content type="html"><![CDATA[<p>由於開發多個專案的時候，頻繁切換本地環境的PHP版本實在太麻煩，於是想要可以直接使用指令就完成切換的功能，於是有了這篇文章。</p><h3 id="一、安裝pathman"><a href="#一、安裝pathman" class="headerlink" title="一、安裝pathman"></a>一、安裝pathman</h3><p>按照官方文件安裝<a href="https://github.com/therootcompany/pathman">pathman</a><br>有npm:</p><div class="code-wrapper"><pre><code class="hljs bash">npm install -g pathman</code></pre></div><p>無npm:<br><a href="https://github.com/therootcompany/pathman#downloads">下載</a>後執行指令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> %userprofile%\binmove pathman.exe %userprofile%\bin\pathman.exe%userprofile%\bin\pathman.exe add ~/bin</code></pre></div><h3 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 列出現有的PATH環境變數</span>pathman list<span class="hljs-comment"># 加入新的PATH環境變數</span>pathman add path/to/target<span class="hljs-comment"># 移除既有的PATH環境變數</span>pathman remove path/to/target</code></pre></div><p>安裝完成後記得重新開啟command line</p><h3 id="三、撰寫批次檔"><a href="#三、撰寫批次檔" class="headerlink" title="三、撰寫批次檔"></a>三、撰寫批次檔</h3><ol><li>phpv.bat <div class="code-wrapper"><pre><code class="hljs dos">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">setlocal</span> enabledelayedexpansion<span class="hljs-comment"></span><span class="hljs-comment">@REM 列舉本地安裝的所有PHP版本與執行路徑</span><span class="hljs-built_in">set</span> php5.<span class="hljs-number">6</span>=C:\php\php5.<span class="hljs-number">6</span>.<span class="hljs-number">40</span><span class="hljs-built_in">set</span> php7.<span class="hljs-number">0</span>=C:\php\php7.<span class="hljs-number">0</span>.<span class="hljs-number">33</span><span class="hljs-built_in">set</span> php7.<span class="hljs-number">1</span>=C:\php\php7.<span class="hljs-number">1</span>.<span class="hljs-number">33</span><span class="hljs-built_in">set</span> php7.<span class="hljs-number">2</span>=C:\php\php7.<span class="hljs-number">2</span>.<span class="hljs-number">34</span><span class="hljs-built_in">set</span> php7.<span class="hljs-number">3</span>=C:\php\php7.<span class="hljs-number">3</span>.<span class="hljs-number">33</span><span class="hljs-built_in">set</span> php7.<span class="hljs-number">4</span>=C:\php\php7.<span class="hljs-number">4</span>.<span class="hljs-number">26</span><span class="hljs-built_in">set</span> php8.<span class="hljs-number">0</span>=C:\php\php8.<span class="hljs-number">0</span>.<span class="hljs-number">13</span><span class="hljs-built_in">set</span> php8.<span class="hljs-number">1</span>=C:\php\php8.<span class="hljs-number">1</span>.<span class="hljs-number">0</span><span class="hljs-comment"></span><span class="hljs-comment">@REM 取得輸入版本</span><span class="hljs-built_in">set</span> version=php%<span class="hljs-number">1</span><span class="hljs-comment"></span><span class="hljs-comment">@REM 檢查版本是否存在</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">!%version%!</span>)==() (    <span class="hljs-built_in">echo</span> unknow version: %<span class="hljs-number">1</span>    <span class="hljs-keyword">exit</span>)<span class="hljs-comment"></span><span class="hljs-comment">@REM 移除現有版本</span>pathman remove <span class="hljs-variable">%php5.6%</span>pathman remove <span class="hljs-variable">%php7.0%</span>pathman remove <span class="hljs-variable">%php7.1%</span>pathman remove <span class="hljs-variable">%php7.2%</span>pathman remove <span class="hljs-variable">%php7.3%</span>pathman remove <span class="hljs-variable">%php7.4%</span>pathman remove <span class="hljs-variable">%php8.0%</span>pathman remove <span class="hljs-variable">%php8.1%</span><span class="hljs-comment"></span><span class="hljs-comment">@REM 設定指定的版本</span>pathman add <span class="hljs-variable">!%version%!</span><span class="hljs-built_in">echo</span> change php version to: <span class="hljs-variable">!%version%!</span></code></pre></div></li></ol><h3 id="四、設定環境變數"><a href="#四、設定環境變數" class="headerlink" title="四、設定環境變數"></a>四、設定環境變數</h3><p>將存放該bat檔案的路徑加入環境變數，例如我的bat完整路徑為：</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\php\phpv.bat</code></pre></div><p>那就將<code>C:\php</code>加入PATH中<br>除了利用GUI完成外，也可以利用剛剛安裝的pathman工具</p><div class="code-wrapper"><pre><code class="hljs routeros">pathman <span class="hljs-built_in">add</span> C:\php</code></pre></div><p>設定完成後重新開啟command line，就可以輕鬆使用<code>phpv</code>指令切換PHP版本了，例如：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">phpv</span> <span class="hljs-number">8</span>.<span class="hljs-number">1</span></code></pre></div><hr><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>Windows 10</li></ul>]]></content>
    
    
    <categories>
      
      <category>Batch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Batch</tag>
      
      <tag>bat</tag>
      
      <tag>Windows</tag>
      
      <tag>環境變數</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[PHP] 為PHP中的cURL安裝OpenSSL憑證</title>
    <link href="/posts/20231101-php-openssl/"/>
    <url>/posts/20231101-php-openssl/</url>
    
    <content type="html"><![CDATA[<h3 id="一、下載憑證"><a href="#一、下載憑證" class="headerlink" title="一、下載憑證"></a>一、下載憑證</h3><ol><li><p>點選<code>cacert.pem</code>下載<a href="https://curl.se/docs/caextract.html">CA certificates extracted from Mozilla</a><br><img src="https://hackmd.io/_uploads/rk-_7uyma.png" alt="image.png"></p></li><li><p>將憑證放置到伺服器的主機上，例如<code>/etc/ssl/certs/cacert.pem</code></p></li></ol><h3 id="二、設定php-ini"><a href="#二、設定php-ini" class="headerlink" title="二、設定php.ini"></a>二、設定php.ini</h3><ol><li><p>開啟php.ini，並找到以下兩行</p> <div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">;openssl.cafile=</span><span class="hljs-comment">;openssl.capath=</span></code></pre></div></li><li><p>刪除最前面的分號取消註解，並將下載的憑證路徑設定到這兩行上後儲存</p> <div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">openssl.cafile</span>=/etc/ssl/certs/cacert.pem<span class="hljs-attr">openssl.capath</span>=/etc/ssl/certs/cacert.pem</code></pre></div></li></ol><h3 id="三、重新啟動Web-Server"><a href="#三、重新啟動Web-Server" class="headerlink" title="三、重新啟動Web Server"></a>三、重新啟動Web Server</h3><ol><li><p>重新啟動web server</p> <div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Apache</span>systemctl httpd restart<span class="hljs-comment"># Nginx</span>systemctl nginx restart</code></pre></div><p> 對於沒有systemd的Linux系統</p> <div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Apache</span>service stop httpdservice start httpd<span class="hljs-comment"># Nginx</span>service stop nginxservice start nginx</code></pre></div></li><li><p>如果是使用php-fpm也要重新啟動</p> <div class="code-wrapper"><pre><code class="hljs crmsh">service <span class="hljs-literal">stop</span> php7-fpmservice <span class="hljs-literal">start</span> php7-fpm</code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>OpenSSL</tag>
      
      <tag>憑證</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[其他] 軟體開發常用命名規則</title>
    <link href="/posts/20231101-other-codding-name/"/>
    <url>/posts/20231101-other-codding-name/</url>
    
    <content type="html"><![CDATA[<p>軟體開發時應該要有固定的命名規則，以提高程式的可讀性，以JAVA命名慣例為例：</p><ul><li>大駝峰式：類別(Class)、界面(Interface)</li><li>小駝峰式：方法(Method)、變數(Variable)</li><li>大蛇形：常數(Constant)</li></ul><h2 id="駝峰式"><a href="#駝峰式" class="headerlink" title="駝峰式"></a>駝峰式</h2><h3 id="大駝峰式-Upper-Camel-Case"><a href="#大駝峰式-Upper-Camel-Case" class="headerlink" title="大駝峰式(Upper Camel Case)"></a>大駝峰式(Upper Camel Case)</h3><p>每個單字字首大寫，單字直接相連<br>範例：<code>UpperCamelCase</code></p><h3 id="小駝峰式-Lower-Camel-Case"><a href="#小駝峰式-Lower-Camel-Case" class="headerlink" title="小駝峰式(Lower Camel Case)"></a>小駝峰式(Lower Camel Case)</h3><p>第一個單字字首小寫，之後的單字字首大寫，單字直接相連<br>範例：<code>lowerCamelCase</code></p><h2 id="蛇形式"><a href="#蛇形式" class="headerlink" title="蛇形式"></a>蛇形式</h2><h3 id="大蛇形式-Upper-Snake-Case"><a href="#大蛇形式-Upper-Snake-Case" class="headerlink" title="大蛇形式(Upper Snake Case)"></a>大蛇形式(Upper Snake Case)</h3><p>全部單字大寫，單字之間以底線(<code>_</code>)區隔<br>範例：<code>UPPER_SNAKE_CASE</code></p><h3 id="小蛇形式-Lower-Snake-Case"><a href="#小蛇形式-Lower-Snake-Case" class="headerlink" title="小蛇形式(Lower Snake Case)"></a>小蛇形式(Lower Snake Case)</h3><p>全部單字小寫，單字之間以底線(<code>_</code>)區隔<br>範例：<code>lower_snake_case</code></p><h2 id="烤肉串式"><a href="#烤肉串式" class="headerlink" title="烤肉串式"></a>烤肉串式</h2><h3 id="烤肉串式-Kebab-Case"><a href="#烤肉串式-Kebab-Case" class="headerlink" title="烤肉串式(Kebab Case)"></a>烤肉串式(Kebab Case)</h3><p>全部單字小寫，單字之間以dash符號(<code>-</code>)區隔<br>範例：<code>kebab-case</code></p><hr><h2 id="現代不推薦的命名法"><a href="#現代不推薦的命名法" class="headerlink" title="現代不推薦的命名法"></a>現代不推薦的命名法</h2><h3 id="匈牙利命名法-Hungarian-Notation"><a href="#匈牙利命名法-Hungarian-Notation" class="headerlink" title="匈牙利命名法(Hungarian Notation)"></a>匈牙利命名法(Hungarian Notation)</h3><p>在命名前面加入型別，例如s代表字串，i代表整數<br>不推薦原因可以參考<a href="https://zh.wikipedia.org/wiki/%E5%8C%88%E7%89%99%E5%88%A9%E5%91%BD%E5%90%8D%E6%B3%95">維基百科</a>的說明<br>範例：<code>sHungarianNotation</code></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>[MySQL] MySQL重置密碼及修改密碼</title>
    <link href="/posts/20231030-mysql-reset-password/"/>
    <url>/posts/20231030-mysql-reset-password/</url>
    
    <content type="html"><![CDATA[<p>此文章記錄在Linux上 MySQL重置密碼及修改密碼方式</p><h2 id="重置密碼"><a href="#重置密碼" class="headerlink" title="重置密碼"></a>重置密碼</h2><ol><li><p>使用指令找到MySQL讀取的my.cnf檔案路徑：</p> <div class="code-wrapper"><pre><code class="hljs bash">mysql --<span class="hljs-built_in">help</span> | grep <span class="hljs-string">&#x27;Default options&#x27;</span> -A 1</code></pre></div><p> <img src="https://ithelp.ithome.com.tw/upload/images/20210917/20139878tdWoM4F0RF.png" alt="https://ithelp.ithome.com.tw/upload/images/20210917/20139878tdWoM4F0RF.png"></p></li><li><p>編輯my.cnf</p> <div class="code-wrapper"><pre><code class="hljs bash">vim [檔案路徑]</code></pre></div><p> 在[mysqld]標籤底下加入 <code>skip-grant-tables</code><br> <img src="https://ithelp.ithome.com.tw/upload/images/20210917/201398784j19xSm9Pj.png" alt="https://ithelp.ithome.com.tw/upload/images/20210917/201398784j19xSm9Pj.png"></p></li><li><p>使用指令重啟資料庫</p> <div class="code-wrapper"><pre><code class="hljs bash">service mysql restart</code></pre></div></li><li><p>登入MySQL(直接輸入Enter不需要打密碼)，並使用以下指令</p> <div class="code-wrapper"><pre><code class="hljs sql">use mysql;<span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> authentication_string <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;FLUSH PRIVILEGES;EXIT</code></pre></div></li><li><p>重新編輯my.cnf，並將剛剛加入的<code>skip-grant-tables</code> 移除</p></li><li><p>再次重啟資料庫</p></li><li><p>即可使用空字串作為密碼進行登入</p></li></ol><h2 id="修改密碼"><a href="#修改密碼" class="headerlink" title="修改密碼"></a>修改密碼</h2><p>修改密碼相當簡單，使用有權限的帳號登入MySQL後，使用以下指令：</p><div class="code-wrapper"><pre><code class="hljs sql">use mysql;<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;root%&#x27;</span> \G;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> root<span class="hljs-variable">@localhost</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;newPassword&#x27;</span>;FLUSH PRIVILEGES;EXIT</code></pre></div><h2 id="環境："><a href="#環境：" class="headerlink" title="環境："></a>環境：</h2><ul><li>Ubuntu 16.04.6 LTS</li><li>MySQL 5.7.33</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CodeIgniter] 記憶體的隱形殺手：Log all queries</title>
    <link href="/posts/20231030-ci-query-log-and-memary/"/>
    <url>/posts/20231030-ci-query-log-and-memary/</url>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在寫CI的時候是否曾經遇過out of memory的錯誤呢<br>CodeIgniter作為輕量化的PHP框架<br>db物件一直是操作資料庫的好幫手<br>簡化了下達sql指令時的操作<br>加快了開發的速度<br>但其實看似好用的工具裡說不定有著隱藏的問題</p><h3 id="二、正文"><a href="#二、正文" class="headerlink" title="二、正文"></a>二、正文</h3><p><code>$this-&gt;db</code>作為一個操作資料庫的物件<br>有兩個官方文檔中<a href="https://codeigniter.com/userguide3/general/profiling.html">幾乎沒有提到</a>的參數：<br><code>$this-&gt;db-&gt;queries</code> 與 <code>$this-&gt;db-&gt;query_times</code></p><p>這個功能其實是CodeIgniter提供給開發者查詢sql指令紀錄與執行時間的功能<br>可以看到每個sql語法花費的實際時間<br><strong>直接看Code：</strong></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$times</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;query_times;<span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;db-&gt;queries <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$query</span>)&#123;    <span class="hljs-variable">$microsec</span> = <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$times</span>[<span class="hljs-variable">$key</span>] * <span class="hljs-number">1000</span>, <span class="hljs-number">4</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[&#x27;</span> . <span class="hljs-variable">$microsec</span> . <span class="hljs-string">&#x27; microseconds] &#x27;</span> . <span class="hljs-variable">$query</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;&#125;</code></pre></div><p><strong>執行結果：</strong><br><img src="https://ithelp.ithome.com.tw/upload/images/20210917/20139878LzO8sMXawj.png" alt="https://ithelp.ithome.com.tw/upload/images/20210917/20139878LzO8sMXawj.png"></p><p>從執行結果可以清楚的了解每個sql語法花費了多久的時間進行查詢<br>幫助開發人員進行效能優化<br>執行的<strong>所有</strong>語法都存在這個變數裡面，真是太方便了對吧~</p><p><font size=5 >但是</font></p><p>這個功能在CodeIgniter裡是預設開啟的<br>所以當今天需要進行大量的sql查詢時<br>這個功能就會默默地吃掉記憶體<br>甚至導致out of memory錯誤</p><p>如果沒有特別需要的話<br>可以在資料庫設定加上 <code>&#39;save_queries&#39; =&gt; FALSE</code><br>如下：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$db</span>[<span class="hljs-string">&#x27;default&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;dsn&#x27;</span>=&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;hostname&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;database&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;dbdriver&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysqli&#x27;</span>,<span class="hljs-string">&#x27;dbprefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;pconnect&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,<span class="hljs-string">&#x27;db_debug&#x27;</span> =&gt; (ENVIRONMENT !== <span class="hljs-string">&#x27;production&#x27;</span>),<span class="hljs-string">&#x27;cache_on&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,<span class="hljs-string">&#x27;cachedir&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;char_set&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-string">&#x27;dbcollat&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8_general_ci&#x27;</span>,<span class="hljs-string">&#x27;swap_pre&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;encrypt&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,<span class="hljs-string">&#x27;compress&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,<span class="hljs-string">&#x27;stricton&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,<span class="hljs-string">&#x27;failover&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(),<span class="hljs-string">&#x27;save_queries&#x27;</span> =&gt; <span class="hljs-literal">FALSE</span>,<span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">3306</span>,);</code></pre></div><p>或是在執行大量查詢前<br>先使用：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;db-&gt;save_queries = <span class="hljs-literal">FALSE</span>;</code></pre></div><p>來避免log紀錄吃掉大量記憶體導致記憶體溢出的狀況</p><h3 id="三、結語"><a href="#三、結語" class="headerlink" title="三、結語"></a>三、結語</h3><p>我們都知道使用框架非常方便<br>可以省去很多重複的動作<br>以CodeIgniter中的db物件來說<br>最大的幫助就是減少了每次都要防範SQL injection功夫<br>還有串接SQL語法的麻煩<br>但是框架最大的隱患就是<br>使用它提供的「<strong>方便</strong>」<br>但卻不知道框架到底在背後做了什麼事情</p><p>我們需要思考一個問題：<br>你在使用這些方便的工具生成SQL語法時<br>真的知道它實際上執行的SQL語句長甚麼樣子嗎?<br>會不會程式效率很差的原因就出在框架?</p><p>這篇並不是鼓勵不要使用框架<br>而是想分享一個觀念：<strong>不要過度依賴任何工具</strong><br>真的清楚自己做了甚麼事情<br>才不會哪一天被自己給坑了</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>CodeIgniter 3</li></ul>]]></content>
    
    
    <categories>
      
      <category>CodeIgniter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CodeIgniter</tag>
      
      <tag>記憶體</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[CodeIgniter] 隱藏網址中的index.php</title>
    <link href="/posts/20231029-ci-rm-index/"/>
    <url>/posts/20231029-ci-rm-index/</url>
    
    <content type="html"><![CDATA[<p>Codeigniter如果不調整設定，網址中會自帶index.php<br>為了符合MVC架構，通常會將它去除，以下是處理步驟：</p><h3 id="一、開啟伺服器的mod-rewrite"><a href="#一、開啟伺服器的mod-rewrite" class="headerlink" title="一、開啟伺服器的mod_rewrite"></a>一、開啟伺服器的mod_rewrite</h3><p>這邊我以Apache作為範例<br>開啟httpd.conf，找到這行：<code>#LoadModule rewrite_module modules/mod_rewrite.so</code><br><img src="https://ithelp.ithome.com.tw/upload/images/20210726/20139878y1uX4Whiiu.png" alt="https://ithelp.ithome.com.tw/upload/images/20210726/20139878y1uX4Whiiu.png"><br>我們要取消註解，所以將這行前面的#去除<br>並<strong>重新啟動Apache</strong></p><h3 id="二、-確認mod-rewrite是否啟用"><a href="#二、-確認mod-rewrite是否啟用" class="headerlink" title="二、 確認mod_rewrite是否啟用"></a>二、 確認mod_rewrite是否啟用</h3><p>運行php函式phpinfo()，並開啟該畫面後<br>搜尋<code>mod_rewrite</code><br><img src="https://ithelp.ithome.com.tw/upload/images/20210726/20139878RW82EbATwl.png" alt="https://ithelp.ithome.com.tw/upload/images/20210726/20139878RW82EbATwl.png"><br>只要在loaded modules欄位內有找到mod_rewrite就代表啟用成功</p><h3 id="三、-編輯-htaccess檔案"><a href="#三、-編輯-htaccess檔案" class="headerlink" title="三、 編輯.htaccess檔案"></a>三、 編輯.htaccess檔案</h3><p>找到codeigniter根目錄內的.htaccess檔案(若沒有該檔案則建立一個)，並在檔案內加入以下內容：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">on</span><span class="hljs-attribute">RewriteCond</span> $<span class="hljs-number">1</span> !^(index\.php)<span class="hljs-attribute">RewriteCond</span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<span class="hljs-attribute">RewriteCond</span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<span class="hljs-attribute">RewriteCond</span> $<span class="hljs-number">1</span> !^(index\.php|img|css|js|fonts|robots\.txt)<span class="hljs-attribute">RewriteRule</span> ^(.*)$ index.php/$<span class="hljs-number">1</span><span class="hljs-meta"> [L,QSA]</span></code></pre></div><h3 id="四、-修改config-php檔案"><a href="#四、-修改config-php檔案" class="headerlink" title="四、 修改config.php檔案"></a>四、 修改config.php檔案</h3><p>找到application\config\config.php，並找到<br><code>$config[&#39;index_page&#39;] = &#39;index.php&#39;;</code><br>並改成：<br><code>$config[&#39;index_page&#39;] = &#39;&#39;;</code></p><p>接下來你的網址就可以省略輸入index.php了</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>Windows 10</li><li>php 7.3.5</li><li>Apache 2.4.39</li><li>Codeigniter 3.1.6</li></ul>]]></content>
    
    
    <categories>
      
      <category>CodeIgniter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CodeIgniter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Laravel] 客製化你的Laravel: macro</title>
    <link href="/posts/20220825-laravel-macro/"/>
    <url>/posts/20220825-laravel-macro/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章同步刊登於<a href="https://blog.twjoin.com/%E5%AE%A2%E8%A3%BD%E5%8C%96%E4%BD%A0%E7%9A%84laravel-macro-a50cb917d82">哲煜科技的Medium</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有的時候，會希望在Laravel原生的class新增功能的時候，大多我們都會寫一個新的class並繼承，但是其實Laravel提供了一個不同的方式，讓我們可以在常用的class上，直接新增想要的function，那就是macro。</p><h3 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h3><p>我們可以在Provider的boot()裡面使用macro來添加自訂的function，這邊以Collection為例子:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title class_">Collection</span>::<span class="hljs-title function_ invoke__">macro</span>(<span class="hljs-string">&#x27;remove&#x27;</span>, function (<span class="hljs-keyword">string</span> <span class="hljs-variable">$filterValue</span>, ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$filterKey</span> = <span class="hljs-literal">null</span>) &#123;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$item</span>) &#123;        <span class="hljs-comment">// 根據是否有$filterKey決定如何取值</span>        <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$filterKey</span>) ? <span class="hljs-variable">$item</span> : <span class="hljs-title function_ invoke__">data_get</span>(<span class="hljs-variable">$item</span>, <span class="hljs-variable">$filterKey</span>);        <span class="hljs-comment">// 如果值與$filterValue相同就移除該item</span>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$value</span> == <span class="hljs-variable">$filterValue</span>) &#123;            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">forget</span>(<span class="hljs-variable">$key</span>);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>;&#125;);</code></pre></div><p>現在Collection就被註冊了一個名為remove的function了，可以直接透過value移除指定的元素:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$collection</span> = <span class="hljs-title function_ invoke__">collect</span>([    <span class="hljs-string">&#x27;標題1&#x27;</span>, <span class="hljs-string">&#x27;標題2&#x27;</span>, <span class="hljs-string">&#x27;標題3&#x27;</span>, <span class="hljs-string">&#x27;標題4&#x27;</span>]);<span class="hljs-variable">$collection</span>-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-string">&#x27;標題3&#x27;</span>);</code></pre></div><p>或是像data_get一樣取得巢狀物件或陣列的方式，移除指定的元素，例如:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$collection</span> = <span class="hljs-title function_ invoke__">collect</span>([[    <span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-string">&#x27;標題1&#x27;</span>,    <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-string">&#x27;內容1&#x27;</span>,    <span class="hljs-string">&#x27;writer&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;作者1&#x27;</span>,        <span class="hljs-string">&#x27;gender&#x27;</span> =&gt; <span class="hljs-string">&#x27;man&#x27;</span>,    ],],[    <span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-string">&#x27;標題2&#x27;</span>,    <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-string">&#x27;內容2&#x27;</span>,    <span class="hljs-string">&#x27;writer&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;作者2&#x27;</span>,        <span class="hljs-string">&#x27;gender&#x27;</span> =&gt; <span class="hljs-string">&#x27;woman&#x27;</span>,    ],],[    <span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-string">&#x27;標題3&#x27;</span>,    <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-string">&#x27;內容3&#x27;</span>,    <span class="hljs-string">&#x27;writer&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;作者3&#x27;</span>,            <span class="hljs-string">&#x27;gender&#x27;</span> =&gt; <span class="hljs-string">&#x27;man&#x27;</span>,        ],    ],]);<span class="hljs-variable">$collection</span>-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-string">&#x27;作者3&#x27;</span>, <span class="hljs-string">&#x27;writer.name&#x27;</span>);</code></pre></div><h3 id="二、實現方式"><a href="#二、實現方式" class="headerlink" title="二、實現方式"></a>二、實現方式</h3><p>在Laravel中只要是有使用<code>Illuminate\Support\Traits\Macroable</code>這個trait的class，就可以使用macro，而Laravel是如何實現這個功能的呢?其實也很簡單，就是利用魔術方法中的call function，讓我們看一下原始碼寫了一些甚麼吧。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">macro</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$macro</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">static</span>::<span class="hljs-variable">$macros</span>[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$macro</span>;&#125;</code></pre></div><p>macro做的事情非常單純，就是把我們放進來的function name跟Closure儲存下來，而等到我們使用自訂function的時候就會觸發call function的機制:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$parameters</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (! <span class="hljs-built_in">static</span>::<span class="hljs-title function_ invoke__">hasMacro</span>(<span class="hljs-variable">$method</span>)) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">BadMethodCallException</span>(<span class="hljs-title function_ invoke__">sprintf</span>(            <span class="hljs-string">&#x27;Method %s::%s does not exist.&#x27;</span>, <span class="hljs-built_in">static</span>::<span class="hljs-variable language_">class</span>, <span class="hljs-variable">$method</span>        ));    &#125;    <span class="hljs-variable">$macro</span> = <span class="hljs-built_in">static</span>::<span class="hljs-variable">$macros</span>[<span class="hljs-variable">$method</span>];    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$macro</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Closure</span>) &#123;        <span class="hljs-variable">$macro</span> = <span class="hljs-variable">$macro</span>-&gt;<span class="hljs-title function_ invoke__">bindTo</span>(<span class="hljs-variable">$this</span>, <span class="hljs-built_in">static</span>::<span class="hljs-variable language_">class</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$macro</span>(...<span class="hljs-variable">$parameters</span>);&#125;</code></pre></div><p>這樣我們的自訂functin就註冊給了這個class，也就可以像內建的function來使用了。<br>在Laravel中，有使用<code>Macroable</code>的class非常的多，包括但不限於以下:</p><ul><li>Response</li><li>Request</li><li>Collection</li><li>HTML</li><li>Form</li><li>Str</li><li>Arr</li><li>Translator</li><li>File</li><li>Lang</li></ul><p>但凡只要有引用<code>Macroable</code>的calss都可以使用carce來註冊自己的function，筆者這邊在Laravel 8內搜尋了一下就發現有51個class有引用<code>Macroable</code>，這還不包含這些class的子class，可以說非常的廣泛，大家不妨可以自己試試看。</p><p>參考資料:</p><ul><li><a href="https://laravel.com/docs/8.x/collections#extending-collections">https://laravel.com/docs/8.x/collections#extending-collections</a></li><li><a href="https://learnku.com/laravel/t/2915/how-to-use-the-macro-method-to-extend-the-function-of-the-base-class-of-laravel">https://learnku.com/laravel/t/2915/how-to-use-the-macro-method-to-extend-the-function-of-the-base-class-of-laravel</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
      <tag>PHP</tag>
      
      <tag>macro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[其他] AD的替代品: OpenLDAP 建置與介接</title>
    <link href="/posts/20220601-other-openldap-introduction/"/>
    <url>/posts/20220601-other-openldap-introduction/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章同步刊登於<a href="https://medium.com/twjoin/%E7%AD%86%E8%A8%98-openldap-%E5%BB%BA%E7%BD%AE%E8%88%87%E4%BB%8B%E6%8E%A5-3e16175b6c3c">哲煜科技的Medium</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果本身是大型組織的IT，或是任職於服務供應商，曾經提供大型客戶客製軟體服務，想必對於微軟的Active Directory(AD)不陌生吧，簡單來講，這個系統的主要目的如下:</p><blockquote><p>用途為以樹狀結構管理組織中的網路物件，物件可以是使用者、群組、電腦、網域控制站、郵件、設定檔、組織單元、樹系等等，只要是在Active Directory結構定義檔（schema）中定義的物件，就可以儲存在Active Directory資料檔中。</p><p>– 統整並節錄於<a href="https://zh.m.wikipedia.org/zh-tw/Active_Directory">維基百科</a></p></blockquote><p>如上所述，透過AD，可以針對整個網域中的設備派送軟體安裝、執行程式，也可以集中管理員工帳號，利用Single Sign-On(SSO)就可以只用一組AD的帳號密碼，讓每個員工登入作業系統與使用應用程式。</p><p>雖然微軟的AD功能完善、只要有Windows Server就能夠架設，但是要錢啊。因此不少企業也選擇了其他的替代方案，例如Novell的eDirectory，或是開源並包含在許多Linux裡的OpenLDAP，而這就是今天要講的主題。</p><h2 id="OpenLDAP建置"><a href="#OpenLDAP建置" class="headerlink" title="OpenLDAP建置"></a>OpenLDAP建置</h2><h3 id="一、-安裝OpenLDAP"><a href="#一、-安裝OpenLDAP" class="headerlink" title="一、 安裝OpenLDAP"></a>一、 安裝OpenLDAP</h3><ol><li><p>更新安裝包目錄</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt update</code></pre></div></li><li><p>下載OpenLDAP</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install slapd</code></pre></div></li><li><p>設定管理者密碼</p></li></ol><p><img src="https://i.imgur.com/e0XXBGF.png"></p><p><img src="https://i.imgur.com/hVlkWvr.png"></p><ol start="4"><li>安裝完成</li></ol><p><img src="https://i.imgur.com/6n9vZxa.png"></p><ol start="5"><li>使用以下指令確認是否有安裝成功<div class="code-wrapper"><pre><code class="hljs bash">sudo netstat -tulnp | grep slapd</code></pre></div>確認389 port正在被監聽中：<br><img src="https://i.imgur.com/sWXU9At.png"></li></ol><h3 id="二、設定slapd"><a href="#二、設定slapd" class="headerlink" title="二、設定slapd"></a>二、設定slapd</h3><ol><li>重新產生slapd的設定檔<div class="code-wrapper"><pre><code class="hljs bash">sudo dpkg-reconfigure slapd</code></pre></div></li><li>選擇「NO」，不忽略OpenLDAP server配置</li></ol><p><img src="https://i.imgur.com/OPUs4Dh.png"></p><ol start="3"><li>設定domain name<br>OpenLDAP會根據設定生成該AD之後的base dn(Distinguish Name)<br>以圖中的<code>ad.hankz.org.tw</code>為例，產生的base_dn就會是<code>dc=ad,dc=hankz,dc=org,dc=tw</code></li></ol><p><img src="https://i.imgur.com/hzEPi9B.png"></p><ol start="4"><li>設定組織名稱，不影響結構</li></ol><p><img src="https://i.imgur.com/VeKu4AA.png"></p><ol start="5"><li>設定管理員密碼</li></ol><p><img src="https://i.imgur.com/4Uy1bFt.png"></p><p><img src="https://i.imgur.com/Jw4r5hR.png"></p><ol start="6"><li>設定後端使用資料庫，選擇MDB即可</li></ol><p><img src="https://i.imgur.com/09AS6pH.png"></p><ol start="7"><li>是否要在移除slapd時，清除資料庫</li></ol><p><img src="https://i.imgur.com/vWnE0m2.png"></p><ol start="8"><li>是否要備份舊資料庫(預設路徑：<code>/var/backups/</code>)</li></ol><p><img src="https://i.imgur.com/URvRGic.png"></p><ol start="9"><li>LDAPv2是過時的，是否禁用LDAPv2(建議禁用)</li></ol><p><img src="https://i.imgur.com/f8rkmLX.png"></p><ol start="10"><li>設定完成</li></ol><p><img src="https://i.imgur.com/0daaI6q.png"></p><ol start="11"><li>查詢ldap內容(清單條列，不方便閱讀，後面會介紹GUI工具)<div class="code-wrapper"><pre><code class="hljs bash">sudo slapcat</code></pre></div><img src="https://i.imgur.com/HR2yW9p.png"></li></ol><h2 id="ldap常用設定"><a href="#ldap常用設定" class="headerlink" title="ldap常用設定"></a>ldap常用設定</h2><h3 id="一、禁用匿名存取-anonymous-access"><a href="#一、禁用匿名存取-anonymous-access" class="headerlink" title="一、禁用匿名存取(anonymous access)"></a>一、禁用匿名存取(anonymous access)</h3><p>來源：<a href="https://serverfault.com/questions/63916/how-to-disable-anonymous-access-on-ldap">https://serverfault.com/questions/63916/how-to-disable-anonymous-access-on-ldap</a></p><ol><li><p>安裝ldap-utils</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install ldap-utils</code></pre></div></li><li><p>建立檔案</p><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /usr/share/slapd/ldap_disable_bind_anon.ldif</code></pre></div></li><li><p>輸入以下內容後，儲存檔案並退出(重點：<code>olcDisallows: bind_anon</code>)</p><div class="code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">dn</span>: cn=config<span class="hljs-attribute">changetype</span>: modify<span class="hljs-attribute">add</span>: olcDisallows<span class="hljs-attribute">olcDisallows</span>: bind_anon<span class="hljs-attribute">dn</span>: cn=config<span class="hljs-attribute">changetype</span>: modify<span class="hljs-attribute">add</span>: olcRequires<span class="hljs-attribute">olcRequires</span>: authc<span class="hljs-attribute">dn</span>: olcDatabase=&#123;-1&#125;frontend,cn=config<span class="hljs-attribute">changetype</span>: modify<span class="hljs-attribute">add</span>: olcRequires<span class="hljs-attribute">olcRequires</span>: authc</code></pre></div></li><li><p>應用設定</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /usr/share/slapd/ldap_disable_bind_anon.ldif</code></pre></div></li></ol><p>結果：<br><img src="https://i.imgur.com/ZF7X00f.png"></p><h2 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h2><h3 id="一、Softerra-LDAP-Administrator"><a href="#一、Softerra-LDAP-Administrator" class="headerlink" title="一、Softerra LDAP Administrator"></a>一、Softerra LDAP Administrator</h3><p>當然使用這種command line介面管理實在是不太現實，所以我使用<a href="https://www.ldapadministrator.com/">Softerra LDAP Administrator</a>來作為GUI管理介面</p><ol><li><p>下載並安裝軟體後，新增連線<br><img src="https://i.imgur.com/JEGVAis.png"></p></li><li><p>填入連線資訊(Base DN可省略)<br><img src="https://i.imgur.com/9YSdzHU.png"></p></li><li><p>切換到Credentials頁籤，選擇Other credentials，輸入使用者dn與密碼<br><img src="https://i.imgur.com/mvZl3Yj.png"></p></li><li><p>登入後就可以看到整個openLDAP的結構，新增、修改、刪除等等都可以透過這個工具去完成，有興趣的話，讀者可以去研究一下如何使用，這邊就不多做贅述<br><img src="https://i.imgur.com/75FGaJp.png"></p></li></ol><h2 id="PHP介接OpenLDAP"><a href="#PHP介接OpenLDAP" class="headerlink" title="PHP介接OpenLDAP"></a>PHP介接OpenLDAP</h2><p>身為軟體開發者，比較常遇見的使用場景大概就是介接Single Sign-On(SSO)和撈取資料並進行同步了吧，這邊就用PHP簡單示範一下基本的帳號登入與搜尋資料吧。</p><h3 id="一、登入"><a href="#一、登入" class="headerlink" title="一、登入"></a>一、登入</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$host</span> = <span class="hljs-string">&#x27;[YOUR_LDAP_SERVE_HOST]&#x27;</span>;<span class="hljs-variable">$port</span> = <span class="hljs-string">&#x27;[YOUR_LDAP_SERVE_PORT]&#x27;</span>;<span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;[USER_DN]&#x27;</span>; <span class="hljs-comment">// OpenLDAP與MS AD不同，不是使用帳號欄位進行登入</span><span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;[USER_PASSWORD]&#x27;</span>;<span class="hljs-variable">$ldapconn</span> = @<span class="hljs-title function_ invoke__">ldap_connect</span>(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-variable">$ldapconn</span>) &#123;    <span class="hljs-comment">// Host 或 Port 「格式」設定錯誤(這步並沒有對OpenLDAP進行連線)</span>    <span class="hljs-keyword">die</span>();&#125;<span class="hljs-variable">$ldapbind</span> = @<span class="hljs-title function_ invoke__">ldap_bind</span>(<span class="hljs-variable">$ldapconn</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>); <span class="hljs-comment">// 真正連線的地方</span><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ldapbind</span>) &#123;    <span class="hljs-comment">// 登入成功</span>&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 登入失敗</span>&#125;</code></pre></div><h3 id="二、搜索資料"><a href="#二、搜索資料" class="headerlink" title="二、搜索資料"></a>二、搜索資料</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$host</span> = <span class="hljs-string">&#x27;[YOUR_LDAP_SERVE_HOST]&#x27;</span>;<span class="hljs-variable">$port</span> = <span class="hljs-string">&#x27;[YOUR_LDAP_SERVE_PORT]&#x27;</span>;<span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;[USER_DN]&#x27;</span>; <span class="hljs-comment">// OpenLDAP與MS AD不同，不是使用帳號欄位進行登入</span><span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;[USER_PASSWORD]&#x27;</span>;<span class="hljs-variable">$ldapconn</span> = @<span class="hljs-title function_ invoke__">ldap_connect</span>(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-variable">$ldapconn</span>) &#123;    <span class="hljs-comment">// Host 或 Port 「格式」設定錯誤(請注意這步並沒有對OpenLDAP進行連線)</span>    <span class="hljs-keyword">die</span>();&#125;<span class="hljs-comment">// 如果要使用匿名存取的話，拿掉這行</span><span class="hljs-variable">$ldapbind</span> = @<span class="hljs-title function_ invoke__">ldap_bind</span>(<span class="hljs-variable">$ldapconn</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<span class="hljs-comment">// 例如：dc=ad,dc=hankz,dc=org,dc=tw</span><span class="hljs-variable">$base_dn</span> = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">// 例如：(objectClass=*)</span><span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;[FILTER]&#x27;</span>;<span class="hljs-comment">// 陣列，想取得的屬性名稱，若要全部取得，設定為array(&#x27;*&#x27;)</span><span class="hljs-variable">$attributes</span> = <span class="hljs-keyword">array</span>();<span class="hljs-comment">// 總取回筆數，0為無限制</span><span class="hljs-variable">$sizeLimit</span> = <span class="hljs-number">0</span>;<span class="hljs-comment">// 每次取回筆數</span><span class="hljs-variable">$pageSize</span> = <span class="hljs-number">1000</span>;<span class="hljs-comment">// 是否有限制筆數</span><span class="hljs-variable">$limit</span> = <span class="hljs-variable">$sizelimit</span> &gt; <span class="hljs-number">0</span>;<span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>();<span class="hljs-variable">$cookie</span> = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">do</span> &#123;    @<span class="hljs-title function_ invoke__">ldap_control_paged_result</span>(<span class="hljs-variable">$ldapconn</span>, <span class="hljs-variable">$pageSize</span>, <span class="hljs-literal">true</span>, <span class="hljs-variable">$cookie</span>);    <span class="hljs-variable">$result</span>  = @<span class="hljs-title function_ invoke__">ldap_list</span>(<span class="hljs-variable">$ldapconn</span>, <span class="hljs-variable">$base_dn</span>, <span class="hljs-variable">$filter</span>, <span class="hljs-variable">$attributes</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$sizelimit</span>);    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$result</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>();    &#125;    <span class="hljs-variable">$entries</span> = <span class="hljs-title function_ invoke__">ldap_get_entries</span>(<span class="hljs-variable">$ldapconn</span>, <span class="hljs-variable">$result</span>);    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$entries</span>[<span class="hljs-string">&#x27;count&#x27;</span>]);    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$entries</span>);    @<span class="hljs-title function_ invoke__">ldap_control_paged_result_response</span>(<span class="hljs-variable">$ldapconn</span>, <span class="hljs-variable">$result</span>, <span class="hljs-variable">$cookie</span>);    <span class="hljs-comment">// 扣掉已取得的筆數</span>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$limit</span>) &#123;        <span class="hljs-variable">$sizelimit</span> -= <span class="hljs-variable">$pageSize</span>;    &#125;    <span class="hljs-comment">// $cookie必須要有值 &amp;&amp; (沒有指定筆數 || 還未取完指定筆數)</span>&#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$cookie</span> !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-variable">$cookie</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; (<span class="hljs-variable">$limit</span> == <span class="hljs-literal">false</span>|| <span class="hljs-variable">$sizelimit</span> &gt; <span class="hljs-number">0</span> ));<span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$data</span>)) &#123;    <span class="hljs-comment">// 取得失敗</span>&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 取得成功</span>&#125;</code></pre></div><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><blockquote><p>Ubuntu 16.04.6 LTS slapd  (Ubuntu) (Feb 18 2021 14:23:06)<br>PHP 7.3.5</p></blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/">https://docs.microsoft.com/zh-tw/azure/active-directory/</a></li><li><a href="https://zh.m.wikipedia.org/zh-tw/Active_Directory">https://zh.m.wikipedia.org/zh-tw/Active_Directory</a></li><li><a href="https://stackoverflow.com/questions/50497256/how-to-re-enable-anonymous-login-in-openldap">https://stackoverflow.com/questions/50497256/how-to-re-enable-anonymous-login-in-openldap</a></li><li><a href="https://www.ldapadministrator.com/">https://www.ldapadministrator.com/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenLDAP</tag>
      
      <tag>LDAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>關於我</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>主要使用PHP進行網頁後端開發，也會一些簡單的JAVA。</p><p>熟悉的框架為CodeIgniter與Laravel，也會撰寫一些簡單的前端，例如：jQuery、Vue。</p><p>目前會在有空時進行文章寫作，歡迎交流。</p>]]></content>
    
  </entry>
  
  
  
</search>
